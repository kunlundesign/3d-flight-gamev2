{"version":3,"file":"index-DpQ2Y43N.js","sources":["../../index.html?html-proxy&index=1.js"],"sourcesContent":["\n    import * as THREE from 'three';\n    import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n    import * as BufferGeometryUtils from 'three/addons/utils/BufferGeometryUtils.js';\n\n        class SkyWarriors {\n            constructor() {\n                this.scene = null;\n                this.camera = null;\n                this.renderer = null;\n                this.aircraft = null;\n                this.loadedModel = null;\n                \n                // Player state\n                this.playerPosition = new THREE.Vector3(0, 50, 0);\n                this.playerVelocity = new THREE.Vector3(0, 0, 0);\n                this.playerSpeed = 60; // Current speed in units/sec\n                this.playerHealth = 30; // Player health (simple difficulty)\n                this.playerMaxHealth = 30; // Maximum player health\n                \n                // Camera view system\n                this.currentViewIndex = 0;\n                this.viewModes = [\n                    {\n                        name: 'Chase View',\n                        offset: new THREE.Vector3(0, 30, -80), // Behind and above\n                        description: 'Default chase camera'\n                    },\n                    {\n                        name: 'Northeast View', \n                        offset: new THREE.Vector3(100, 60, 100), // Northeast isometric\n                        description: 'Northeast isometric view'\n                    },\n                    {\n                        name: 'Northwest View',\n                        offset: new THREE.Vector3(-100, 60, 100), // Northwest isometric  \n                        description: 'Northwest isometric view'\n                    },\n                    {\n                        name: 'Tactical View',\n                        offset: new THREE.Vector3(0, 200, -50), // High above, slightly behind\n                        description: 'Top-down tactical view'\n                    }\n                ];\n                \n                // Flight control state\n                this.inputState = {\n                    pitch: 0,    // Nose up/down rotation (-π/4 to π/4)\n                    yaw: 0,      // Left/right turn rotation  \n                    roll: 0,     // Banking rotation\n                    speed: 0.6,  // Speed multiplier (0.2 to 1.0)\n                    keys: new Set() // Currently pressed keys\n                };\n\n                // World wrapping system\n                this.lastWrapMessageTime = 0;\n                \n                // === GLB动画系统 ===\n                this.modelAnimationMixer = null;      // 动画混合器\n                this.modelAnimations = [];            // 动画片段数组\n                this.activeAnimations = [];           // 当前播放的动画\n                this.animationClock = new THREE.Clock(); // 动画时钟\n                \n                // Terrain and environment\n                this.terrain = [];\n                this.clouds = [];\n                // === Environment configuration ===\n                // === Scene variant system ===\n                // Supported: 'grassland' | 'snow' | 'desert' | 'ocean'\n                this.sceneType = 'grassland';\n                // Try read hash (#snow / #desert / #ocean / #grassland) for quick switching\n                const hash = window.location.hash.replace('#','').toLowerCase();\n                if(['snow','desert','ocean','grassland','default'].includes(hash)) {\n                    // Backward compatibility: legacy 'default' maps to 'grassland'\n                    this.sceneType = (hash === 'default') ? 'grassland' : (hash || 'grassland');\n                }\n                this.environmentConfig = this.getEnvironmentConfig(this.sceneType);\n                // === Combat targets ===\n                this.tanks = []; // 静态坦克目标 { mesh, alive, radius }\n                this.warships = []; // 海上战舰 { mesh, alive, radius }\n                // Raycaster for ground height sampling\n                this.raycaster = new THREE.Raycaster();\n                // --- Weapon system state (nose cannons) ---\n                this.isFiring = false;          // 是否按住射击\n                this.lastShotTime = 0;          // 上次发射时间 (s)\n                this.fireInterval = 0.08;       // 射速间隔 ~12.5发/秒\n                this.bullets = [];              // 活跃子弹\n                this.enemyBullets = [];         // 敌方子弹 (AA tanks & warships)\n                this.muzzleFlashes = [];        // 枪口火光\n                this.gunBarrels = [];           // 炮口引用\n                this.tempVec = new THREE.Vector3();\n                this.forwardVec = new THREE.Vector3(0,0,1);\n                \n                // === Optimized smoke particle system ===\n                // Removed complex continuous smoke system for performance\n                // Using simple one-time explosion smoke instead\n                \n                \n                // === Scoreboard & player identity ===\n                this.playerName = null;\n                this.scoreData = { players: {} }; // { name: { tank:0, ship:0, total:0, last:timestamp } }\n                this.localStorageKey = 'skywarriors_scores_v1';\n                // Session real-time counters (not persisted across reload)\n                this.sessionKills = { tank:0, ship:0 };\n                this.ensurePlayerName();\n                this.loadScores();\n                this.registerPlayerIfNeeded();\n                this.updateScoreboardUI();\n                \n                this.init();\n            }\n            \n            updatePlayerHealthDisplay() {\n                const healthDisplay = document.getElementById('playerHealthDisplay');\n                const healthValue = document.getElementById('playerHealthValue');\n                \n                if (healthDisplay && healthValue) {\n                    healthDisplay.style.display = 'block';\n                    healthValue.textContent = Math.max(0, Math.round(this.playerHealth));\n                    \n                    // Change color and add warning animation when health is low\n                    if (this.playerHealth <= 10) {\n                        healthDisplay.classList.add('low-health');\n                    } else {\n                        healthDisplay.classList.remove('low-health');\n                    }\n                }\n            }\n\n            init() {\n                this.setupScene();\n                this.setupLighting();\n                this.createTerrain();\n                this.createClouds();\n                this.createDefaultAircraft();\n                this.createNoseCannons(); // 机头机炮\n                this.setupFileUpload();\n                this.setupKeyboardControls();\n                this.setupMouseControls(); // 鼠标射击\n                this.setupSceneSwitcher(); // Scene switching UI\n                this.hideLoadingScreen();\n                this.gameLoop();\n            }\n\n            setupScene() {\n                // Scene\n                this.scene = new THREE.Scene();\n                // Fog / background by scene type\n                const fogColors = {\n                    default: 0x87CEEB,\n                    snow: 0xdbe9f5,\n                    desert: 0xe2c27b,\n                    ocean: 0x6fb2ff\n                };\n                const fogColor = fogColors[this.sceneType] || 0x87CEEB;\n                this.scene.fog = new THREE.Fog(fogColor, 100, 2000);\n                \n                // Camera\n                this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000);\n                this.camera.position.set(0, 100, 200);\n                \n                // Renderer\n                this.renderer = new THREE.WebGLRenderer({ \n                    antialias: true,\n                    alpha: true\n                });\n                this.renderer.setSize(window.innerWidth, window.innerHeight);\n                this.renderer.setClearColor(fogColor, 1);\n                this.renderer.shadowMap.enabled = true;\n                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n                \n                document.getElementById('gameContainer').appendChild(this.renderer.domElement);\n                \n                // Handle window resize\n                window.addEventListener('resize', () => {\n                    this.camera.aspect = window.innerWidth / window.innerHeight;\n                    this.camera.updateProjectionMatrix();\n                    this.renderer.setSize(window.innerWidth, window.innerHeight);\n                });\n            }\n\n            setupLighting() {\n                // === 自然环境光 - 模拟晴天柔和光照 ===\n                const ambientLight = new THREE.AmbientLight(0xffffff, 0.6); // 降低到0.6，自然柔和\n                this.scene.add(ambientLight);\n                \n                // === 自然太阳光 - 模拟真实晴天阳光 ===\n                const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0); // 降低到1.0，自然强度\n                directionalLight.position.set(100, 300, 100); // 保持自然角度\n                directionalLight.castShadow = true;\n                \n                // 优化阴影质量\n                directionalLight.shadow.mapSize.width = 4096;\n                directionalLight.shadow.mapSize.height = 4096;\n                directionalLight.shadow.camera.near = 0.5;\n                directionalLight.shadow.camera.far = 2000;\n                directionalLight.shadow.camera.left = -1000;\n                directionalLight.shadow.camera.right = 1000;\n                directionalLight.shadow.camera.top = 1000;\n                directionalLight.shadow.camera.bottom = -1000;\n                directionalLight.shadow.bias = -0.0001;\n                this.scene.add(directionalLight);\n                \n                // === 自然天空光 - 模拟天空散射光 ===\n                const skyLight = new THREE.HemisphereLight(\n                    0x87CEEB,  // 天空蓝色\n                    0x5D8A3A,  // 地面绿色\n                    0.4        // 降低到0.4，柔和天空光\n                );\n                skyLight.position.set(0, 500, 0);\n                this.scene.add(skyLight);\n                \n                // === 移除过强的飞机专用聚光灯 ===\n                // 不再添加专用聚光灯，使用自然光照\n                \n                // === 轻微补光系统 - 仅用于消除过暗阴影 ===\n                const fillLights = [\n                    { pos: [200, 100, 0], intensity: 0.2 },    // 右侧轻微补光\n                    { pos: [-200, 100, 0], intensity: 0.2 },   // 左侧轻微补光\n                    { pos: [0, 100, 200], intensity: 0.15 },   // 前方轻微补光\n                    { pos: [0, 100, -200], intensity: 0.15 }   // 后方轻微补光\n                ];\n                \n                fillLights.forEach(light => {\n                    const fillLight = new THREE.DirectionalLight(0xffffff, light.intensity);\n                    fillLight.position.set(light.pos[0], light.pos[1], light.pos[2]);\n                    fillLight.castShadow = false; // 补光不产生阴影\n                    this.scene.add(fillLight);\n                });\n                \n                // === 移除GLB专用增强光 ===\n                // 不再添加专用增强光，使用自然光照\n            }\n\n            createTerrain() {\n                // Ground plane base\n                const groundGeometry = new THREE.PlaneGeometry(8000, 8000, 150, 150);\n                let groundColor = 0x5D8A3A; // default grass\n                if (this.sceneType === 'snow') groundColor = 0xF2F6F9;\n                else if (this.sceneType === 'desert') groundColor = 0xD9C190;\n                else if (this.sceneType === 'ocean') groundColor = 0x1b4f8a; // seabed (deep)\n                const groundMaterial = new THREE.MeshLambertMaterial({ color: groundColor, wireframe: false });\n                \n                // Add some height variation to the ground\n                const vertices = groundGeometry.attributes.position.array;\n                for (let i = 0; i < vertices.length; i += 3) {\n                    vertices[i + 2] = Math.random() * 15 - 7; // 减少地面起伏，更平坦\n                }\n                groundGeometry.attributes.position.needsUpdate = true;\n                groundGeometry.computeVertexNormals();\n                \n                const ground = new THREE.Mesh(groundGeometry, groundMaterial);\n                ground.rotation.x = -Math.PI / 2;\n                ground.position.y = -50;\n                ground.receiveShadow = true;\n                this.scene.add(ground);\n                // 保存地面引用用于高度采样\n                this.ground = ground;\n                \n                if (this.sceneType === 'snow') {\n                    this.createSnowMountains();\n                    this.createConiferForests();\n                    // Frozen lakes (reuse lakes with pale blue)\n                    this.createLakes(0xbdd9f2, true);\n                } else if (this.sceneType === 'desert') {\n                    this.createDesertDunes();\n                    this.createPyramids();\n                    this.createDesertPlants();\n                } else if (this.sceneType === 'ocean') {\n                    this.createOceanSurface();\n                    this.createSmallIslands();\n                    this.createWarships(6);\n                } else { // grassland (formerly 'default')\n                    this.createMountainRanges();\n                    this.createTrees();\n                    this.createLakes();\n                    this.createSoilPatches(this.environmentConfig.soilPatchCount);\n                    if (this.environmentConfig.rockCount > 0) this.createRocks(this.environmentConfig.rockCount);\n                    this.createGrassPatches(this.environmentConfig.grassPatchCount);\n                    for (let i=0;i<this.environmentConfig.bushClusterCount;i++) {\n                        this.createBushCluster((Math.random()-0.5)*6500,(Math.random()-0.5)*6500,6+Math.random()*8);\n                    }\n                    if (this.environmentConfig.birdFlocks > 0) {\n                        for (let i=0;i<this.environmentConfig.birdFlocks;i++) this.createBirdFlock();\n                    }\n                }\n                // Tanks only in non-ocean scene; warships already handled in ocean branch\n                if (this.sceneType !== 'ocean') this.createTanks(30);\n            }\n\n            getEnvironmentConfig(type){\n                // Map legacy 'default' to new canonical 'grassland'\n                if (type === 'default') type = 'grassland';\n                switch(type){\n                    case 'snow':\n                        return { treeDensityMultiplier: 1.8, rockCount: 10, grassPatchCount: 40, bushClusterCount: 20, birdFlocks:0, soilPatchCount:20 };\n                    case 'desert':\n                        return { treeDensityMultiplier: 0.4, rockCount: 5, grassPatchCount: 0, bushClusterCount: 5, birdFlocks:0, soilPatchCount:10 };\n                    case 'ocean':\n                        return { treeDensityMultiplier: 0, rockCount: 0, grassPatchCount: 0, bushClusterCount: 0, birdFlocks:0, soilPatchCount:0 };\n                    case 'grassland':\n                    default:\n                        return { treeDensityMultiplier: 2.8, rockCount: 0, grassPatchCount: 180, bushClusterCount: 70, birdFlocks:0, soilPatchCount:120 };\n                }\n            }\n\n            // ===== Snow Scene Helpers =====\n            createSnowMountains(){\n                this.createMountainRange(-2500,-1500,7,'high',0xd8dfe6);\n                this.createMountainRange(2600,2100,6,'high',0xcfd8de);\n                for(let i=0;i<20;i++) this.createSingleMountain((Math.random()-0.5)*7000,(Math.random()-0.5)*7000,'random',0xe0e7ec);\n            }\n            createConiferForests(){\n                for(let i=0;i<140;i++) this.createTree((Math.random()-0.5)*6500,(Math.random()-0.5)*6500,'pine');\n            }\n\n            // ===== Desert Scene Helpers =====\n            createDesertDunes(){\n                // gentle height noise already added; add some dune ridges as low hills\n                for(let i=0;i<40;i++){\n                    const geo = new THREE.ConeGeometry(120+Math.random()*180, 30+Math.random()*25, 12);\n                    geo.scale(2.5,0.4,1.2);\n                    const mat = new THREE.MeshLambertMaterial({ color: 0xE3D2A1 });\n                    const m = new THREE.Mesh(geo, mat);\n                    m.position.set((Math.random()-0.5)*7000,-35,(Math.random()-0.5)*7000);\n                    m.rotation.y = Math.random()*Math.PI;\n                    m.castShadow = true; m.receiveShadow = true;\n                    this.scene.add(m);\n                }\n            }\n            createPyramids(){\n                const pyramidMat = new THREE.MeshLambertMaterial({ color: 0xC9B065 });\n                for(let i=0;i<5;i++){\n                    const size = 200 + Math.random()*160;\n                    const geo = new THREE.ConeGeometry(size/2, size/1.2, 4);\n                    const p = new THREE.Mesh(geo, pyramidMat);\n                    p.rotation.y = Math.PI/4;\n                    p.position.set((Math.random()-0.5)*6000, -50 + size/2.4, (Math.random()-0.5)*6000);\n                    p.castShadow = true; p.receiveShadow = true;\n                    this.scene.add(p);\n                }\n            }\n            createDesertPlants(){\n                // Populus euphratica (胡杨) simplified tall trunk + sparse crown\n                for(let i=0;i<60;i++){\n                    const trunk = new THREE.Mesh(new THREE.CylinderGeometry(0.5,0.7,18,6), new THREE.MeshLambertMaterial({ color:0x8b5a2b }));\n                    const crown = new THREE.Mesh(new THREE.SphereGeometry(5,8,6), new THREE.MeshLambertMaterial({ color:0xd4c98a }));\n                    crown.position.y = 10;\n                    const g = new THREE.Group(); g.add(trunk); g.add(crown);\n                    g.position.set((Math.random()-0.5)*7000,-50,(Math.random()-0.5)*7000);\n                    this.scene.add(g);\n                }\n                // Cactus\n                for(let i=0;i<120;i++){\n                    const h = 6 + Math.random()*10;\n                    const main = new THREE.Mesh(new THREE.CylinderGeometry(0.7,0.9,h,6), new THREE.MeshLambertMaterial({ color:0x2f6f3b }));\n                    const group = new THREE.Group(); group.add(main);\n                    if(Math.random()>0.5){\n                        const arm = new THREE.Mesh(new THREE.CylinderGeometry(0.4,0.5, h*0.5,6), main.material);\n                        arm.position.y = h*0.4; arm.position.x = 0.9; arm.rotation.z = Math.PI/10;\n                        group.add(arm);\n                    }\n                    group.position.set((Math.random()-0.5)*7000,-50,(Math.random()-0.5)*7000);\n                    this.scene.add(group);\n                }\n                // Sea-buckthorn (沙棘) as low orange shrubs\n                for(let i=0;i<160;i++){\n                    const r = 1.5 + Math.random()*2.5;\n                    const shrub = new THREE.Mesh(new THREE.SphereGeometry(r,8,6), new THREE.MeshLambertMaterial({ color:0xd9922e }));\n                    shrub.position.set((Math.random()-0.5)*7200,-50 + r*0.4,(Math.random()-0.5)*7200);\n                    shrub.castShadow = true; this.scene.add(shrub);\n                }\n            }\n\n            // ===== Ocean Scene Helpers =====\n            createOceanSurface(){\n                // Add reflective water-like plane (simple material placeholder)\n                const water = new THREE.Mesh(new THREE.PlaneGeometry(8000,8000,50,50), new THREE.MeshLambertMaterial({ color:0x2f7dd1, transparent:true, opacity:0.95 }));\n                water.rotation.x = -Math.PI/2; water.position.y = -40; water.receiveShadow = true;\n                this.scene.add(water);\n            }\n            createSmallIslands(){\n                for(let i=0;i<18;i++){\n                    const rad = 120 + Math.random()*140;\n                    const geo = new THREE.CircleGeometry(rad, 24);\n                    const mat = new THREE.MeshLambertMaterial({ color:0xc8c087 });\n                    const isl = new THREE.Mesh(geo, mat);\n                    isl.rotation.x = -Math.PI/2;\n                    isl.position.set((Math.random()-0.5)*6000,-49.5,(Math.random()-0.5)*6000);\n                    this.scene.add(isl);\n                    // palm or pine few trees reused\n                    for(let t=0;t<5;t++) this.createTree(isl.position.x + (Math.random()-0.5)*rad, isl.position.z + (Math.random()-0.5)*rad, 'palm');\n                }\n            }\n\n            createMountainRanges() {\n                // 1. 雄伟的高山脉\n                this.createMountainRange(-3000, -2000, 8, 'high', 0x8b7355);\n                this.createMountainRange(2500, 2200, 6, 'high', 0x696969);\n                \n                // 2. 中等山丘\n                this.createMountainRange(-1500, 2800, 5, 'medium', 0xA0522D);\n                this.createMountainRange(3200, -1200, 7, 'medium', 0x8b7355);\n                \n                // 3. 低矮丘陵\n                this.createMountainRange(0, 3500, 4, 'low', 0x9ACD32);\n                this.createMountainRange(-2800, 1000, 5, 'low', 0x228B22);\n                \n                // 4. 独立山峰\n                for (let i = 0; i < 15; i++) {\n                    const x = (Math.random() - 0.5) * 7000;\n                    const z = (Math.random() - 0.5) * 7000;\n                    this.createSingleMountain(x, z, 'random');\n                }\n            }\n\n            createMountainRange(centerX, centerZ, count, type, color) {\n                for (let i = 0; i < count; i++) {\n                    const angle = (i / count) * Math.PI * 2;\n                    const radius = 200 + Math.random() * 300;\n                    const x = centerX + Math.cos(angle) * radius;\n                    const z = centerZ + Math.sin(angle) * radius;\n                    this.createSingleMountain(x, z, type, color);\n                }\n            }\n\n            createSingleMountain(x, z, type, color) {\n                let height, baseRadius, shape, mountainColor;\n                switch(type) {\n                    case 'high':\n                        height = 120 + Math.random()*110;\n                        baseRadius = 50 + Math.random()*40;\n                        shape = Math.random()<0.2 ? 'ridge' : (Math.random()<0.4 ? 'mesa' : 'cone');\n                        mountainColor = color || 0x7a6550; break;\n                    case 'medium':\n                        height = 70 + Math.random()*60;\n                        baseRadius = 40 + Math.random()*30;\n                        shape = Math.random()<0.3 ? 'pyramid' : (Math.random()<0.55 ? 'dome' : 'cone');\n                        mountainColor = color || 0x9c6233; break;\n                    case 'low':\n                        height = 30 + Math.random()*45;\n                        baseRadius = 32 + Math.random()*22;\n                        shape = Math.random()<0.5 ? 'dome' : 'ridge';\n                        mountainColor = color || 0x6fae3b; break;\n                    default:\n                        return this.createSingleMountain(x, z, ['high','medium','low'][Math.floor(Math.random()*3)]);\n                }\n                if (Math.random()<0.08) shape = 'crater';\n                let mountainGeometry;\n                switch(shape) {\n                    case 'cone':\n                        mountainGeometry = new THREE.ConeGeometry(baseRadius, height, 10 + Math.floor(Math.random()*5)); break;\n                    case 'pyramid':\n                        mountainGeometry = new THREE.ConeGeometry(baseRadius, height, 4); break;\n                    case 'dome':\n                        mountainGeometry = new THREE.SphereGeometry(baseRadius, 12, 8,0,Math.PI*2,0,Math.PI/2); mountainGeometry.scale(1,height/baseRadius,1); break;\n                    case 'mesa': {\n                        const base = new THREE.CylinderGeometry(baseRadius*0.8, baseRadius, height*0.65, 10);\n                        const top = new THREE.CylinderGeometry(baseRadius*0.55, baseRadius*0.6, height*0.15, 10); top.translate(0,height*0.4,0);\n                        mountainGeometry = BufferGeometryUtils ? BufferGeometryUtils.mergeGeometries([base, top]) : base; break;\n                    }\n                    case 'ridge':\n                        mountainGeometry = new THREE.ConeGeometry(baseRadius, height, 6); mountainGeometry.scale(1.8,1,0.6); break;\n                    case 'crater':\n                        mountainGeometry = new THREE.CylinderGeometry(baseRadius*1.3, baseRadius*1.4, height*0.5, 24,1,true); break;\n                }\n                const posAttr = mountainGeometry.attributes.position;\n                for (let i=0;i<posAttr.count;i++) {\n                    const vx = posAttr.getX(i), vy = posAttr.getY(i), vz = posAttr.getZ(i);\n                    const noise = (Math.sin(vx*0.15)+Math.sin(vz*0.18))*0.6 + (Math.random()-0.5)*0.9;\n                    posAttr.setY(i, vy + noise*2);\n                    posAttr.setX(i, vx + (Math.random()-0.5)*0.8);\n                    posAttr.setZ(i, vz + (Math.random()-0.5)*0.8);\n                }\n                posAttr.needsUpdate = true;\n                mountainGeometry.computeVertexNormals();\n                const hFactor = THREE.MathUtils.clamp((height-40)/140,0,1);\n                const baseColor = new THREE.Color(mountainColor);\n                const tint = new THREE.Color().setHSL(0.08 + 0.1*hFactor, 0.35, 0.25 + 0.25*hFactor);\n                baseColor.lerp(tint,0.4);\n                // === 对齐到地面防止悬浮 ===\n                mountainGeometry.computeBoundingBox();\n                const bbox = mountainGeometry.boundingBox;\n                const GROUND_Y = -50;\n                // 计算将几何底部贴到地面的中心 Y\n                const placeY = GROUND_Y - bbox.min.y; // 使 (placeY + bbox.min.y) == GROUND_Y\n                const mountainMaterial = new THREE.MeshLambertMaterial({ color: baseColor });\n                const mountain = new THREE.Mesh(mountainGeometry, mountainMaterial);\n                mountain.position.set(x, placeY, z);\n                mountain.rotation.y = Math.random()*Math.PI*2;\n                mountain.castShadow = true; mountain.receiveShadow = true;\n                mountain.userData.type = 'mountain';\n                this.scene.add(mountain);\n                // 雪顶重新基于实际最高点放置\n                if (height > 110) {\n                    const snowHeight = height*0.25;\n                    const snow = new THREE.Mesh(new THREE.ConeGeometry(baseRadius*0.35, snowHeight, 10), new THREE.MeshLambertMaterial({ color: 0xf5f7f8 }));\n                    const topY = mountain.position.y + bbox.max.y; // 山体最高点\n                    // 放在最高点稍低一点，保持贴合\n                    snow.position.set(x, topY - height*0.12, z);\n                    snow.castShadow = false; snow.receiveShadow = true;\n                    this.scene.add(snow);\n                }\n            }\n\n            // === createTerrain 函数结束 ===\n\n            createClouds() {\n                // 增加云朵数量并扩大分布范围到新的8000x8000地形\n                for (let i = 0; i < 60; i++) { // Increased from 30 to 60\n                    const cloudGeometry = new THREE.SphereGeometry(20 + Math.random() * 30, 8, 6);\n                    const cloudMaterial = new THREE.MeshLambertMaterial({ \n                        color: 0xffffff,\n                        transparent: true,\n                        opacity: 0.7\n                    });\n                    const cloud = new THREE.Mesh(cloudGeometry, cloudMaterial);\n                    \n                    cloud.position.set(\n                        (Math.random() - 0.5) * 6000,  // 从 2000 扩大到 6000\n                        100 + Math.random() * 200,\n                        (Math.random() - 0.5) * 6000   // 从 2000 扩大到 6000\n                    );\n                    \n                    cloud.scale.set(\n                        1 + Math.random() * 0.5,\n                        0.3 + Math.random() * 0.3,\n                        1 + Math.random() * 0.5\n                    );\n                    \n                    this.clouds.push(cloud);\n                    this.scene.add(cloud);\n                }\n            }\n\n            createDefaultAircraft() {\n                console.log('Attempting to load red-plane.glb...');\n                \n                // Direct GLTFLoader approach with proper HTTP path\n                const loader = new GLTFLoader();\n                // Use BASE_URL (Vite injects it) for GitHub Pages sub-path compatibility\n                // In Vite environment import.meta.env.BASE_URL is injected. Fallback to '/' when opened directly.\n                const baseUrl = window.__APP_BASE__ || '/';\n                const modelPath = baseUrl + 'models/red-plane.glb';\n                console.log('Loading from path:', modelPath, ' baseUrl:', baseUrl, ' (runtime)');\n                \n                loader.load(modelPath, (gltf) => {\n                    console.log('✅ Successfully loaded red-plane.glb');\n                    const model = gltf.scene;\n                    \n                    // Scale the aircraft to be similar size as tanks (around 46 units)\n                    const targetSize = 46; // Similar to tank length\n                    const box = new THREE.Box3().setFromObject(model);\n                    const size = box.getSize(new THREE.Vector3());\n                    const currentMaxSize = Math.max(size.x, size.y, size.z);\n                    const scaleRatio = targetSize / currentMaxSize;\n                    \n                    model.scale.set(scaleRatio, scaleRatio, scaleRatio);\n                    console.log(`Red plane scaled: ${currentMaxSize.toFixed(2)} → ${targetSize} units (${scaleRatio.toFixed(3)}x)`);\n                    \n                    // === 动画系统设置 ===\n                    this.modelAnimations = gltf.animations; // 存储动画数据\n                    this.modelAnimationMixer = null;\n                    this.activeAnimations = []; // 存储当前播放的动画\n                    \n                    // 如果模型包含动画，创建动画混合器\n                    if (gltf.animations && gltf.animations.length > 0) {\n                        this.modelAnimationMixer = new THREE.AnimationMixer(model);\n                        \n                        console.log(`Red plane: Found ${gltf.animations.length} animations:`, gltf.animations.map(anim => anim.name));\n                        \n                        // 自动播放所有动画（通常用于螺旋桨、引擎等循环动画）\n                        gltf.animations.forEach((clip, index) => {\n                            const action = this.modelAnimationMixer.clipAction(clip);\n                            action.setLoop(THREE.LoopRepeat);\n                            action.clampWhenFinished = false;\n                            \n                            // 自动识别动画类型\n                            const animName = clip.name.toLowerCase();\n                            if (animName.includes('propeller') || \n                                animName.includes('rotor') || \n                                animName.includes('engine') ||\n                                animName.includes('fan') ||\n                                animName.includes('spin')) {\n                                // 快速循环动画（螺旋桨等）\n                                action.timeScale = 2.0; // 2倍速度\n                                action.play();\n                                this.activeAnimations.push(action);\n                                console.log(`Auto-playing fast animation: ${clip.name}`);\n                            } else {\n                                // 其他动画默认也播放\n                                action.timeScale = 1.0;\n                                action.play();\n                                this.activeAnimations.push(action);\n                                console.log(`Auto-playing animation: ${clip.name}`);\n                            }\n                        });\n                    }\n                    \n                    // Enhance materials for better lighting\n                    model.traverse((child) => {\n                        if (child.isMesh) {\n                            child.castShadow = true;\n                            child.receiveShadow = true;\n                            \n                            if (child.material) {\n                                if (Array.isArray(child.material)) {\n                                    child.material.forEach(mat => {\n                                        this.enhanceMaterial(mat);\n                                    });\n                                } else {\n                                    this.enhanceMaterial(child.material);\n                                }\n                            }\n                        }\n                    });\n                    \n                    model.position.copy(this.playerPosition);\n                    this.loadedModel = model;\n                    this.aircraft = model;\n                    model.userData.aircraftType = 'red-plane-glb'; // 标记为GLB飞机\n                    this.scene.add(model);\n                    \n                    console.log('✅ RED PLANE GLB ADDED TO SCENE at position:', model.position);\n                    console.log('✅ Aircraft type set to:', model.userData.aircraftType);\n                    \n                    // Create nose cannons\n                    this.createNoseCannons();\n                    \n                    console.log('Red plane loaded as default aircraft');\n                }, undefined, (error) => {\n                    console.error('❌ GLTFLoader error:', error);\n                    console.log('🔄 Falling back to built-in aircraft');\n                    this.createBuiltInAircraft();\n                });\n            }\n            \n            createBuiltInAircraft() {\n                // Create enhanced P-51 Mustang style fighter aircraft with premium materials\n                const planeGroup = new THREE.Group();\n                \n                // === PREMIUM MATERIALS ===\n                const fuselageMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0xD3D3D3, // 新机身浅灰\n                    metalness: 0.9,\n                    roughness: 0.35,\n                    envMapIntensity: 1.0\n                });\n                \n                // Wing material switched to wood-like (low metalness, higher roughness) while keeping original color\n                const wingMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0xE14A32, // 颜色保持不变\n                    metalness: 0.05,\n                    roughness: 0.85\n                });\n                \n                const glassMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x87ceeb,\n                    transparent: true,\n                    opacity: 0.25,\n                    metalness: 0.0,\n                    roughness: 0.0\n                });\n                \n                const darkMetalMaterial = new THREE.MeshStandardMaterial({\n                    color: 0x5E5E5E, // 机头 / 整流罩用色\n                    metalness: 0.95,\n                    roughness: 0.4\n                });\n                \n                // === ENHANCED FUSELAGE (机身) ===\n                const fuselageGeometry = new THREE.CylinderGeometry(1.4, 0.7, 16, 16);\n                const fuselage = new THREE.Mesh(fuselageGeometry, fuselageMaterial);\n                fuselage.rotation.x = Math.PI / 2;\n                fuselage.position.set(0, 0, 0);\n                fuselage.castShadow = true;\n                fuselage.receiveShadow = true;\n                planeGroup.add(fuselage);\n                \n                // === DETAILED NOSE CONE (机鼻) ===\n                // Nose shortened by 25% (height 4 -> 3)\n                const noseGeometry = new THREE.ConeGeometry(1.4, 3, 16);\n                const nose = new THREE.Mesh(noseGeometry, fuselageMaterial);\n                nose.position.set(0, 0, 10); // center unchanged; tip moves back 0.5\n                nose.rotation.x = Math.PI / 2;\n                nose.castShadow = true;\n                nose.receiveShadow = true;\n                planeGroup.add(nose);\n                \n                // === ENGINE COWLING (发动机整流罩) ===\n                const cowlingGeometry = new THREE.CylinderGeometry(1.6, 1.4, 3, 12);\n                const cowling = new THREE.Mesh(cowlingGeometry, darkMetalMaterial);\n                cowling.rotation.x = Math.PI / 2;\n                cowling.position.set(0, 0, 6.5);\n                cowling.castShadow = true;\n                planeGroup.add(cowling);\n                \n                // === REALISTIC WINGS (真实机翼) ===\n                // Wing root section\n                const wingRootGeometry = new THREE.BoxGeometry(4, 0.8, 4);\n                const wingRoot = new THREE.Mesh(wingRootGeometry, wingMaterial);\n                wingRoot.position.set(0, -0.2, -1);\n                wingRoot.castShadow = true;\n                planeGroup.add(wingRoot);\n                \n                // Tapered wing sections for realistic shape\n                for (let side = -1; side <= 1; side += 2) {\n                    for (let section = 1; section <= 6; section++) {\n                        const width = 4 - (section * 0.4);\n                        const thickness = 0.8 - (section * 0.08);\n                        const wingGeometry = new THREE.BoxGeometry(width, thickness, 3);\n                        const wingSection = new THREE.Mesh(wingGeometry, wingMaterial);\n                        wingSection.position.set(side * section * 1.8, -0.2 - (section * 0.02), -1);\n                        wingSection.castShadow = true;\n                        planeGroup.add(wingSection);\n                    }\n                }\n                \n                // === CLEAN WING TIPS (简洁翼尖) ===\n                // 移除奇怪的半球形翼尖，改为简洁的椭圆翼尖\n                const wingTipGeometry = new THREE.BoxGeometry(1, 0.4, 2);\n                for (let side = -1; side <= 1; side += 2) {\n                    const wingTip = new THREE.Mesh(wingTipGeometry, wingMaterial);\n                    wingTip.position.set(side * 10.8, -0.3, -1);\n                    wingTip.castShadow = true;\n                    planeGroup.add(wingTip);\n                }\n                \n                // === TAIL SECTION (尾翼) ===\n                const tailGeometry = new THREE.CylinderGeometry(0.6, 0.4, 4, 8);\n                const tail = new THREE.Mesh(tailGeometry, fuselageMaterial);\n                tail.rotation.x = Math.PI / 2;\n                tail.position.set(0, 0, -8);\n                tail.castShadow = true;\n                planeGroup.add(tail);\n                \n                // === HORIZONTAL STABILIZER (水平尾翼) 重新制作：缩放版主翼 (40% span) ===\n                // 模仿主翼的分段递减，但整体跨度与各尺寸缩放至 40%\n                (function(){\n                    const tailGroup = new THREE.Group();\n                    const spanScale = 0.4;          // 相对主翼比例\n                    const sections = 6;             // 与主翼相同分段数\n                    const baseWidth = 4;            // 主翼 root 段宽(沿X) 参考\n                    const baseThickness = 0.8;      // 主翼 root 厚度参考\n                    const chordBase = 4;            // 主翼 root chord (沿Z) 参考\n                    // Root central block\n                    const rootWidth = baseWidth * spanScale;\n                    const rootThickness = baseThickness * 0.6 * spanScale; // 更薄\n                    const rootChord = chordBase * 0.55; // 尾翼 chord 减短\n                    const rootGeo = new THREE.BoxGeometry(rootWidth, rootThickness, rootChord);\n                    const rootMesh = new THREE.Mesh(rootGeo, wingMaterial);\n                    rootMesh.position.set(0, 0, -10);\n                    rootMesh.castShadow = true;\n                    tailGroup.add(rootMesh);\n                    // Side tapered sections\n                    for (let side = -1; side <= 1; side += 2) {\n                        for (let s = 1; s <= sections; s++) {\n                            const width = (baseWidth - s * 0.4) * spanScale;\n                            const thickness = (baseThickness - s * 0.08) * 0.6 * spanScale;\n                            const chord = (chordBase - s * 0.35) * 0.55; // 渐缩弦长\n                            if (width <= 0.2 || thickness <= 0.02) continue;\n                            const geo = new THREE.BoxGeometry(width, thickness, Math.max(chord, 0.6));\n                            const mesh = new THREE.Mesh(geo, wingMaterial);\n                            mesh.position.set(side * (s * 1.8 * spanScale), -0.02 - s * 0.01, -10);\n                            mesh.rotation.y = side * THREE.MathUtils.degToRad(1 + s * 0.6); // 轻微后掠\n                            mesh.castShadow = true;\n                            tailGroup.add(mesh);\n                        }\n                        // Tip\n                        const tipGeo = new THREE.BoxGeometry(0.9 * spanScale, 0.35 * spanScale, 1.2 * 0.55);\n                        const tip = new THREE.Mesh(tipGeo, wingMaterial);\n                        tip.position.set(side * (sections * 1.8 * spanScale + 0.3), -0.1, -10);\n                        tip.castShadow = true;\n                        tailGroup.add(tip);\n                    }\n                    planeGroup.add(tailGroup);\n                })();\n                \n                // === VERTICAL STABILIZER (垂直尾翼) REWORK: 正确右角三角形，短边贴机身，斜边朝前 ===\n                (function(){\n                    const base = 3.0;        // 前向（+Z）基底长度\n                    const height = 4.2;      // 垂直高度 (+Y)\n                    const r = 0.32;          // 圆角半径\n                    const thickness = 0.18;   // 厚度 (X)\n                    // 在二维平面 (x=前向Z, y=高度Y) 上构建右角三角形，右角在根部 (0,0)\n                    const shape = new THREE.Shape();\n                    // 从根部稍右 (r,0) 开始，顺时针绕行\n                    shape.moveTo(r,0);\n                    shape.lineTo(base - r,0);                                // 底边\n                    shape.quadraticCurveTo(base,0, base, r);                 // 前下角圆角\n                    shape.lineTo(r, height - r);                             // 斜边到近顶点\n                    shape.quadraticCurveTo(0,height, 0, height - r);         // 顶角圆角（根部上）\n                    shape.lineTo(0, r);                                      // 回到前缘根部\n                    shape.quadraticCurveTo(0,0, r,0);                         // 根部下角圆角\n                    shape.closePath();\n                    // 挤出 (depth 沿 +Z，之后旋转使其厚度沿 X)\n                    const extrudeGeo = new THREE.ExtrudeGeometry(shape,{ depth: thickness, bevelEnabled:false });\n                    // 旋转：将局部 Z(厚度) -> X，全局前向使用局部 X\n                    extrudeGeo.rotateY(Math.PI / 2);\n                    // 重新计算包围盒并对齐：根部垂直边 (x≈0) 贴机身，底部 y=0\n                    extrudeGeo.computeBoundingBox();\n                    let bb = extrudeGeo.boundingBox;\n                    // 将底部移到 y=0\n                    extrudeGeo.translate(0, -bb.min.y, 0);\n                    extrudeGeo.computeBoundingBox();\n                    bb = extrudeGeo.boundingBox;\n                    // 将根部前缘 (z 最小) 移到 z=0\n                    if (Math.abs(bb.min.z) > 1e-5) extrudeGeo.translate(0,0,-bb.min.z);\n                    // 厚度中心化 (X 居中)\n                    extrudeGeo.computeBoundingBox();\n                    bb = extrudeGeo.boundingBox;\n                    const xCenter = -(bb.min.x + bb.max.x)/2;\n                    extrudeGeo.translate(xCenter,0,0);\n                    // 创建 Mesh 并放置在尾部基准 z=-10\n                    const fin = new THREE.Mesh(extrudeGeo, wingMaterial);\n                    fin.position.set(0,0,-10);\n                    // 水平翻转（沿Z轴镜像）\n                    fin.scale.z = -1;\n                    fin.updateMatrix();\n                    fin.castShadow = true;\n                    planeGroup.add(fin);\n                })();\n                \n                // === ENHANCED PROPELLER ASSEMBLY ===\n                // Propeller spinner\n                const spinnerGeometry = new THREE.ConeGeometry(0.8, 1.5, 12);\n                const spinnerMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x000000, // 螺旋桨锥 黑色\n                    metalness: 0.95, \n                    roughness: 0.25 \n                });\n                const spinner = new THREE.Mesh(spinnerGeometry, spinnerMaterial);\n                spinner.position.set(0, 0, 12.0); // moved back to match shorter nose\n                spinner.rotation.x = Math.PI / 2;\n                spinner.castShadow = true;\n                planeGroup.add(spinner);\n                \n                // Propeller hub\n                const hubGeometry = new THREE.CylinderGeometry(0.6, 0.6, 0.6, 12);\n                const hub = new THREE.Mesh(hubGeometry, spinnerMaterial); // 黑色金属\n                hub.position.set(0, 0, 11.0); // adjusted with shorter nose\n                hub.rotation.x = Math.PI / 2;\n                hub.castShadow = true;\n                planeGroup.add(hub);\n                \n                // Enhanced propeller blades\n                const propGroup = new THREE.Group();\n                const bladeMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x000000, // 螺旋桨叶黑色金属\n                    metalness: 0.9,\n                    roughness: 0.35\n                });\n                \n                for (let i = 0; i < 3; i++) {\n                    // Realistic blade shape with taper\n                    const bladeGeometry = new THREE.BoxGeometry(0.3, 8, 0.15);\n                    const blade = new THREE.Mesh(bladeGeometry, bladeMaterial);\n                    blade.rotation.z = (i * 2 * Math.PI) / 3;\n                    blade.castShadow = true;\n                    propGroup.add(blade);\n                    \n                    // Blade tips\n                    const tipGeometry = new THREE.SphereGeometry(0.2, 8, 4);\n                    const tip = new THREE.Mesh(tipGeometry, bladeMaterial);\n                    tip.position.set(0, 4, 0);\n                    tip.rotation.z = (i * 2 * Math.PI) / 3;\n                    blade.add(tip);\n                }\n                \n                propGroup.position.set(0, 0, 11.3); // adjusted forward group anchor\n                planeGroup.add(propGroup);\n                this.propeller = propGroup;\n                \n                // === DETAILED LANDING GEAR (起落架) - Shorter & Smaller ===\n                const gearMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x404040,\n                    metalness: 0.8,\n                    roughness: 0.3\n                });\n                \n                // Main gear struts with hydraulics (shorter and thinner)\n                for (let side = -1; side <= 1; side += 2) {\n                    const strutGeometry = new THREE.CylinderGeometry(0.06, 0.09, 2.2, 8); // Reduced from 3.5 to 2.2, thinner\n                    const strut = new THREE.Mesh(strutGeometry, gearMaterial);\n                    strut.position.set(side * 1.8, -1.8, 0); // Moved up and closer\n                    strut.castShadow = true;\n                    planeGroup.add(strut);\n                    \n                    // Wheels with detailed rims (smaller)\n                    const wheelGeometry = new THREE.CylinderGeometry(0.65, 0.65, 0.3, 16); // Reduced from 0.9 to 0.65\n                    const wheelMaterial = new THREE.MeshStandardMaterial({ \n                        color: 0x1a1a1a,\n                        roughness: 0.9\n                    });\n                    const wheel = new THREE.Mesh(wheelGeometry, wheelMaterial);\n                    wheel.position.set(side * 1.8, -2.9, 0); // Adjusted position\n                    wheel.rotation.z = Math.PI / 2;\n                    wheel.castShadow = true;\n                    planeGroup.add(wheel);\n                    \n                    // Wheel rims (smaller)\n                    const rimGeometry = new THREE.CylinderGeometry(0.5, 0.5, 0.32, 16); // Reduced from 0.7 to 0.5\n                    const rim = new THREE.Mesh(rimGeometry, gearMaterial);\n                    rim.position.set(side * 1.8, -2.9, 0);\n                    rim.rotation.z = Math.PI / 2;\n                    rim.castShadow = true;\n                    planeGroup.add(rim);\n                }\n                \n                // Tail wheel (shorter and smaller)\n                const tailGearGroup = new THREE.Group();\n                // Strut (thinner and shorter)\n                const tailStrut = new THREE.Mesh(new THREE.CylinderGeometry(0.05, 0.08, 1.5, 8), gearMaterial); // Reduced from 2.2 to 1.5\n                tailStrut.rotation.z = 0; // vertical\n                tailStrut.position.set(0, -0.2, -8.6); // Moved up\n                tailStrut.castShadow = true;\n                tailGearGroup.add(tailStrut);\n                // Axle block (smaller)\n                const tailAxle = new THREE.Mesh(new THREE.BoxGeometry(0.2,0.2,0.4), gearMaterial); // Reduced size\n                tailAxle.position.set(0, -1.0, -9.0); // Adjusted position\n                tailAxle.castShadow = true;\n                tailGearGroup.add(tailAxle);\n                // Wheel (smaller)\n                const tailWheelGeometry = new THREE.CylinderGeometry(0.35, 0.35, 0.25, 14); // Reduced from 0.5 to 0.35\n                const tailWheel = new THREE.Mesh(tailWheelGeometry, new THREE.MeshStandardMaterial({ \n                    color: 0x1a1a1a, roughness: 0.9 \n                }));\n                // Match orientation of main gear wheels (rotate around Z)\n                tailWheel.rotation.x = 0;\n                tailWheel.rotation.z = Math.PI / 2;\n                tailWheel.position.set(0, -1.1, -9.0); // Adjusted position\n                tailWheel.castShadow = true;\n                tailGearGroup.add(tailWheel);\n                planeGroup.add(tailGearGroup);\n                \n                // === COCKPIT CANOPY (半球形座舱盖) with Glass + Frame ===\n                // 半球透明玻璃 + 加强筋框架\n                const canopyRadius = 1.35; // 略大于机身截面, 贴合\n                const canopyGeom = new THREE.SphereGeometry(canopyRadius, 32, 20, 0, Math.PI * 2, 0, Math.PI / 2);\n                // 玻璃材质：轻微蓝绿色调，可调\n                const canopyGlassMaterial = new THREE.MeshStandardMaterial({\n                    color: 0x99c6d8,\n                    metalness: 0.0,\n                    roughness: 0.05,\n                    transparent: true,\n                    opacity: 0.28,\n                    depthWrite: false\n                });\n                const canopyGroup = new THREE.Group();\n                const canopyGlass = new THREE.Mesh(canopyGeom, canopyGlassMaterial);\n                canopyGlass.castShadow = false;\n                canopyGlass.receiveShadow = false;\n                canopyGroup.add(canopyGlass);\n\n                // 框架材质（稍深金属）\n                const canopyFrameMaterial = new THREE.MeshStandardMaterial({\n                    color: 0x2d3134,\n                    metalness: 0.65,\n                    roughness: 0.35\n                });\n                const frameTubeRadius = 0.04;\n                const frameRadialSegments = 12;\n                const frameTubularSegments = 48;\n\n                // 底部环形框 (沿 XY 平面) - Torus 默认轴 Y (平面 XZ)，旋转到 XY\n                const baseRing = new THREE.Mesh(\n                    new THREE.TorusGeometry(canopyRadius * 0.995, frameTubeRadius, frameRadialSegments, frameTubularSegments),\n                    canopyFrameMaterial\n                );\n                baseRing.rotation.x = Math.PI / 2; // 轴从 Y 旋到 Z，使平面变成 XY\n                baseRing.castShadow = true;\n                canopyGroup.add(baseRing);\n\n                // 前后竖向框 (平面 XZ) - 不旋转 (默认平面 XZ)\n                const foreAftRing = new THREE.Mesh(\n                    new THREE.TorusGeometry(canopyRadius, frameTubeRadius * 0.75, frameRadialSegments, frameTubularSegments),\n                    canopyFrameMaterial\n                );\n                foreAftRing.castShadow = true;\n                canopyGroup.add(foreAftRing);\n\n                // 左右竖向框 (平面 YZ) - 旋转 Z 90°\n                const leftRightRing = new THREE.Mesh(\n                    new THREE.TorusGeometry(canopyRadius, frameTubeRadius * 0.75, frameRadialSegments, frameTubularSegments),\n                    canopyFrameMaterial\n                );\n                leftRightRing.rotation.z = Math.PI / 2;\n                leftRightRing.castShadow = true;\n                canopyGroup.add(leftRightRing);\n\n                // 顶部纵向加强筋 (沿 Z 方向的条) 使用细长 Box 略高出表面\n                const topSpine = new THREE.Mesh(new THREE.BoxGeometry(frameTubeRadius * 0.9, frameTubeRadius * 0.9, canopyRadius * 2 * 0.92), canopyFrameMaterial);\n                topSpine.position.y = canopyRadius * 0.72; // 略低于顶点，避免悬空\n                topSpine.castShadow = true;\n                canopyGroup.add(topSpine);\n\n                // 轻微整体向上：贴合机身外壳\n                canopyGroup.position.set(0, 0.68, 0.2);\n                // 水平旋转 90° (绕 Y 轴) \n                canopyGroup.rotation.y = Math.PI / 2;\n                planeGroup.add(canopyGroup);\n                \n                // === COCKPIT INTERIOR (驾驶舱内部) - 调整位置 ===\n                const seatGeometry = new THREE.BoxGeometry(0.8, 0.4, 1.2);\n                const seatMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x4a4a4a, \n                    roughness: 0.8 \n                });\n                const seat = new THREE.Mesh(seatGeometry, seatMaterial);\n                seat.position.set(0, 0.1, 0.5); // 稍微降低座椅位置\n                seat.castShadow = true;\n                planeGroup.add(seat);\n                \n                // Control stick (操纵杆)\n                const stickGeometry = new THREE.CylinderGeometry(0.05, 0.05, 0.6, 8);\n                const stick = new THREE.Mesh(stickGeometry, darkMetalMaterial);\n                stick.position.set(0, 0.4, 1.0); // 调整操纵杆位置\n                stick.castShadow = true;\n                planeGroup.add(stick);\n                \n                // Instrument panel (仪表板)\n                const panelGeometry = new THREE.BoxGeometry(1.4, 0.6, 0.08);\n                const panelMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0x2a2a2a, \n                    roughness: 0.6,\n                    metalness: 0.3\n                });\n                const panel = new THREE.Mesh(panelGeometry, panelMaterial);\n                panel.position.set(0, 0.5, 2.0); // 调整仪表板位置\n                panel.rotation.x = -Math.PI / 6; // 向后倾斜15度\n                panel.castShadow = true;\n                planeGroup.add(panel);\n                \n                // === NAVIGATION LIGHTS (导航灯) ===\n                // Wing tip lights with proper aviation colors\n                for (let side = -1; side <= 1; side += 2) {\n                    const lightGeometry = new THREE.SphereGeometry(0.12, 8, 6);\n                    const lightMaterial = new THREE.MeshStandardMaterial({ \n                        color: side > 0 ? 0x00ff00 : 0xff0000, // Green right, red left\n                        emissive: side > 0 ? 0x004400 : 0x440000,\n                        emissiveIntensity: 0.5,\n                        metalness: 0.1,\n                        roughness: 0.2\n                    });\n                    const light = new THREE.Mesh(lightGeometry, lightMaterial);\n                    light.position.set(side * 11, 0, -1);\n                    planeGroup.add(light);\n                }\n                \n                // Tail navigation light\n                const tailLightGeometry = new THREE.SphereGeometry(0.08, 8, 6);\n                const tailLightMaterial = new THREE.MeshStandardMaterial({ \n                    color: 0xffffff,\n                    emissive: 0x222222,\n                    emissiveIntensity: 0.3,\n                    metalness: 0.1,\n                    roughness: 0.2\n                });\n                const tailLight = new THREE.Mesh(tailLightGeometry, tailLightMaterial);\n                tailLight.position.set(0, 1, -12);\n                planeGroup.add(tailLight);\n                \n                // === ENHANCED ENGINE EXHAUST STACKS (排气管) ===\n                for (let i = 0; i < 6; i++) {\n                    const exhaustGeometry = new THREE.CylinderGeometry(0.12, 0.18, 1.2, 8);\n                    const exhaustMaterial = new THREE.MeshStandardMaterial({ \n                        color: 0x2a2a2a,\n                        metalness: 0.6,\n                        roughness: 0.7,\n                        emissive: 0x221100,\n                        emissiveIntensity: 0.1\n                    });\n                    const exhaust = new THREE.Mesh(exhaustGeometry, exhaustMaterial);\n                    const angle = (i / 6) * Math.PI * 2;\n                    const radius = 1.2;\n                    exhaust.position.set(\n                        Math.cos(angle) * radius, \n                        Math.sin(angle) * radius, \n                        5\n                    );\n                    exhaust.rotation.x = Math.PI / 2;\n                    exhaust.castShadow = true;\n                    planeGroup.add(exhaust);\n                }\n                \n                // === FINAL ASSEMBLY ===\n                planeGroup.position.copy(this.playerPosition);\n                planeGroup.scale.set(2.16, 2.16, 2.16); // 等比例再放大1.5倍 (原 1.44)\n                \n                // Store references\n                this.loadedModel = null; // Clear custom model reference for visible cannons\n                this.aircraft = planeGroup;\n                planeGroup.userData.aircraftType = 'built-in-aircraft'; // 标记为内置飞机\n                this.scene.add(this.aircraft);\n                \n                console.log('⚠️ BUILT-IN AIRCRAFT CREATED as fallback');\n                console.log('⚠️ Aircraft type set to:', planeGroup.userData.aircraftType);\n                \n                // Remove existing cannons and recreate with proper visibility\n                const existingCannons = this.aircraft.getObjectByName('NoseCannons');\n                if (existingCannons) {\n                    this.aircraft.remove(existingCannons);\n                }\n                this.gunBarrels = []; // Clear barrel references\n                this.createNoseCannons(); // Recreate with full visibility\n                \n                console.log('Built-in aircraft loaded as fallback');\n            }\n\n            // ================= Nose Cannon System =================\n            createNoseCannons() {\n                if (!this.aircraft) return;\n                // 避免重复添加\n                if (this.aircraft.getObjectByName('NoseCannons')) return;\n                const barrelsGroup = new THREE.Group();\n                barrelsGroup.name = 'NoseCannons';\n                \n                // Check if using custom GLB model - make guns transparent if so\n                const isCustomModel = !!this.loadedModel;\n                const barrelMat = new THREE.MeshStandardMaterial({\n                    color: 0x2c2c2c,\n                    metalness: 0.85,\n                    roughness: 0.25,\n                    transparent: isCustomModel,\n                    opacity: isCustomModel ? 0.0 : 1.0  // Fully transparent for custom models\n                });\n                \n                const barrelGeo = new THREE.CylinderGeometry(0.12, 0.12, 1.6, 12);\n                this.gunBarrels = [];\n                for (let s of [-1,1]) {\n                    const barrel = new THREE.Mesh(barrelGeo, barrelMat);\n                    barrel.rotation.x = Math.PI/2;\n                    barrel.position.set(s*0.6, -0.15, 7.2);\n                    barrel.castShadow = !isCustomModel; // No shadows for transparent guns\n                    barrelsGroup.add(barrel);\n                    this.gunBarrels.push(barrel);\n                }\n                // 装饰基座环\n                const ringGeo = new THREE.TorusGeometry(0.28, 0.045, 6, 16);\n                for (let s of [-1,1]) {\n                    const ring = new THREE.Mesh(ringGeo, new THREE.MeshStandardMaterial({\n                        color: 0x555555,\n                        metalness: 0.6,\n                        roughness: 0.4,\n                        transparent: isCustomModel,\n                        opacity: isCustomModel ? 0.0 : 1.0  // Fully transparent for custom models\n                    }));\n                    ring.rotation.x = Math.PI/2;\n                    ring.position.set(s*0.6, -0.15, 6.45);\n                    ring.castShadow = !isCustomModel; // No shadows for transparent rings\n                    barrelsGroup.add(ring);\n                }\n                this.aircraft.add(barrelsGroup);\n            }\n\n            setupMouseControls() {\n                const canvas = this.renderer.domElement;\n                canvas.addEventListener('mousedown', (e)=>{ if (e.button===0) this.isFiring = true; });\n                window.addEventListener('mouseup', (e)=>{ if (e.button===0) this.isFiring = false; });\n            }\n\n            tryFireGuns(deltaTime) {\n                if (!this.isFiring || !this.aircraft || this.gunBarrels.length===0) return;\n                const now = performance.now()/1000;\n                if (now - this.lastShotTime < this.fireInterval) return;\n                this.lastShotTime = now;\n                // 前向方向\n                this.forwardVec.set(0,0,1).applyEuler(new THREE.Euler(this.inputState.pitch, this.inputState.yaw, this.inputState.roll)).normalize();\n                // 炮口射击\n                this.gunBarrels.forEach(barrel=>{\n                    barrel.getWorldPosition(this.tempVec);\n                    this.spawnBullet(this.tempVec, this.forwardVec);\n                    this.spawnMuzzleFlash(barrel);\n                });\n            }\n\n            spawnBullet(origin, forward) {\n                const geo = new THREE.SphereGeometry(0.45, 10, 10);\n                const mat = new THREE.MeshBasicMaterial({ color: 0xfff066 });\n                const mesh = new THREE.Mesh(geo, mat);\n                mesh.position.copy(origin);\n                this.scene.add(mesh);\n                const speed = 450;\n                this.bullets.push({ mesh, velocity: forward.clone().multiplyScalar(speed), life: 2, age: 0 });\n            }\n\n            spawnMuzzleFlash(barrel) {\n                const flashGeo = new THREE.SphereGeometry(0.2, 8, 8);\n                const flashMat = new THREE.MeshBasicMaterial({ color: 0xffdd44 });\n                const flash = new THREE.Mesh(flashGeo, flashMat);\n                barrel.getWorldPosition(flash.position);\n                this.scene.add(flash);\n                this.muzzleFlashes.push({ mesh: flash, age: 0, life: 0.12 });\n            }\n\n            // ====== Scoreboard helpers ======\n            ensurePlayerName(){\n                const storedName = localStorage.getItem('skywarriors_playerName');\n                if (storedName) { this.playerName = storedName; return; }\n                this.showNamePrompt();\n            }\n            showNamePrompt(){\n                if (document.getElementById('namePromptOverlay')) return;\n                const overlay = document.createElement('div'); overlay.id='namePromptOverlay';\n                overlay.innerHTML = `\\n<div id=\"namePromptBox\">\\n  <h2>Enter Player Name</h2>\\n  <input id=\"playerNameInput\" maxlength=\"18\" placeholder=\"e.g.: Ace Pilot\" />\\n  <button id=\"confirmNameBtn\">Enter Battle</button>\\n  <div class=\"note\">This name will be used for the scoreboard and saved locally.\\n  Leave blank to generate a random name.</div>\\n</div>`;\n                document.body.appendChild(overlay);\n                overlay.querySelector('#confirmNameBtn').addEventListener('click', ()=>{\n                    const val = overlay.querySelector('#playerNameInput').value.trim();\n                    this.playerName = val || ('Pilot_' + Math.random().toString(36).slice(2,7));\n                    localStorage.setItem('skywarriors_playerName', this.playerName);\n                    overlay.remove();\n                    this.registerPlayerIfNeeded();\n                    this.updateScoreboardUI();\n                });\n            }\n            loadScores(){\n                try { const raw = localStorage.getItem(this.localStorageKey); if(raw) this.scoreData = JSON.parse(raw); } catch(e){ console.warn('Load score error', e); }\n            }\n            saveScores(){\n                try { localStorage.setItem(this.localStorageKey, JSON.stringify(this.scoreData)); } catch(e){ console.warn('Save score error', e); }\n            }\n            registerPlayerIfNeeded(){\n                if(!this.playerName) return;\n                if(!this.scoreData.players[this.playerName]){\n                    this.scoreData.players[this.playerName] = { tank:0, ship:0, total:0, last: Date.now() };\n                    this.saveScores();\n                }\n            }\n            recordKill(type){ // type: 'tank' | 'ship'\n                if(!this.playerName) return;\n                const p = this.scoreData.players[this.playerName]; if(!p) return;\n                if(type==='tank') p.tank +=1; else if(type==='ship') p.ship +=1;\n                p.total = p.tank + p.ship; p.last = Date.now();\n                this.saveScores();\n                this.updateScoreboardUI();\n                // session counters\n                if(type==='tank') this.sessionKills.tank++; else if(type==='ship') this.sessionKills.ship++;\n                this.updateHudStats();\n            }\n            updateScoreboardUI(){\n                const panel = document.getElementById('scoreboardPanel');\n                if(!panel){ return; }\n                panel.style.display = 'block';\n                const rowsContainer = document.getElementById('scoreRows');\n                if(!rowsContainer) return;\n                const entries = Object.entries(this.scoreData.players).map(([name,data])=>({ name, ...data }));\n                entries.sort((a,b)=> b.total - a.total || a.name.localeCompare(b.name));\n                rowsContainer.innerHTML = '';\n                entries.forEach((d,idx)=>{\n                    const tr = document.createElement('tr');\n                    if (d.name === this.playerName) tr.classList.add('highlight');\n                    tr.innerHTML = `<td>${idx+1}</td><td>${d.name}</td><td>${d.tank}</td><td>${d.ship}</td><td>${d.total}</td>`;\n                    rowsContainer.appendChild(tr);\n                });\n                const nameDisp = document.getElementById('playerNameDisplay');\n                if(nameDisp) nameDisp.textContent = '当前玩家: ' + (this.playerName||'--');\n                const exportBtn = document.getElementById('exportScoreBtn');\n                if(exportBtn && !exportBtn.dataset.bound){\n                    exportBtn.dataset.bound = '1';\n                    exportBtn.addEventListener('click', ()=> this.exportScoresJSON());\n                }\n            }\n            exportScoresJSON(){\n                const blob = new Blob([JSON.stringify(this.scoreData,null,2)], { type:'application/json' });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url; a.download = 'scores.json'; a.click();\n                URL.revokeObjectURL(url);\n                this.showNotification('已导出积分 JSON', 'success');\n            }\n            updateHudStats(){\n                const hud = document.getElementById('hudStats'); if(!hud) return;\n                hud.style.display = 'flex';\n                const tk = document.getElementById('hudTankKills');\n                const sk = document.getElementById('hudShipKills');\n                const tt = document.getElementById('hudTotalKills');\n                if(tk) tk.textContent = this.sessionKills.tank;\n                if(sk) sk.textContent = this.sessionKills.ship;\n                if(tt) tt.textContent = this.sessionKills.tank + this.sessionKills.ship;\n            }\n\n            updateBullets(deltaTime) {\n                // 子弹移动 & 淡出\n                for (let i = this.bullets.length-1; i>=0; i--) {\n                    const b = this.bullets[i];\n                    b.age += deltaTime;\n                    b.mesh.position.addScaledVector(b.velocity, deltaTime);\n                    // 伸长视觉（沿局部Z用scale模拟）\n                    b.mesh.scale.z = 1 + b.age*4;\n                    const t = b.age / b.life;\n                    if (t > 0.6) {\n                        b.mesh.material.transparent = true;\n                        b.mesh.material.opacity = 1 - (t-0.6)/0.4;\n                    }\n                    // ==== 碰撞检测：子弹 vs 坦克 ====\n                    if (this.tanks && this.tanks.length>0) {\n                        for (let ti = 0; ti < this.tanks.length; ti++) {\n                            const tank = this.tanks[ti];\n                            if (!tank.alive) continue;\n                            const dist = b.mesh.position.distanceTo(tank.mesh.position);\n                            if (dist < tank.radius) {\n                                // 造成伤害\n                                tank.health = Math.max(0, tank.health - 1);\n                                \n                                // 创建小爆炸效果\n                                this.createExplosion(tank.mesh.position.clone().add(\n                                    new THREE.Vector3((Math.random()-0.5)*10, 5, (Math.random()-0.5)*10)\n                                ));\n                                \n                                if (tank.health <= 0) {\n                                    // 坦克被摧毁\n                                    tank.alive = false;\n                                    this.createTankDestroyed(tank.mesh.position.clone(), tank.mesh);\n                                    this.createScorchMark(tank.mesh.position.x, tank.mesh.position.z);\n                                    this.recordKill('tank');\n                                    \n                                    // 清除血条\n                                    if (tank.healthBar) {\n                                        tank.healthBar.container.remove();\n                                    }\n                                } else {\n                                    // 坦克受伤但存活，如果是普通坦克，玩家回血\n                                    if (!tank.isAA) {\n                                        this.playerHealth = Math.min(this.playerMaxHealth, this.playerHealth + 10);\n                                        // TODO: Add visual health gain indicator\n                                    }\n                                }\n                                \n                                // 移除子弹\n                                this.scene.remove(b.mesh);\n                                b.mesh.geometry.dispose();\n                                b.mesh.material.dispose();\n                                this.bullets.splice(i,1);\n                                break; // 跳出坦克循环\n                            }\n                        }\n                    }\n                    // ==== 碰撞检测：子弹 vs 战舰 ====\n                    if (this.warships && this.warships.length>0) {\n                        for (let wi=0; wi<this.warships.length; wi++) {\n                            const ship = this.warships[wi];\n                            if(!ship.alive) continue;\n                            const distS = b.mesh.position.distanceTo(ship.mesh.position);\n                            if (distS < ship.radius) {\n                                // 造成伤害\n                                ship.health = Math.max(0, ship.health - 1);\n                                \n                                // 创建爆炸效果\n                                this.createExplosion(ship.mesh.position.clone().add(\n                                    new THREE.Vector3((Math.random()-0.5)*20, 8, (Math.random()-0.5)*20)\n                                ));\n                                \n                                if (ship.health <= 0) {\n                                    // 军舰被摧毁\n                                    ship.alive = false;\n                                    this.scene.remove(ship.mesh);\n                                    this.createSeaScorch(ship.mesh.position.x, ship.mesh.position.z);\n                                    this.recordKill('ship');\n                                    \n                                    // 清除血条\n                                    if (ship.healthBar) {\n                                        ship.healthBar.container.remove();\n                                    }\n                                }\n                                \n                                this.scene.remove(b.mesh);\n                                b.mesh.geometry.dispose();\n                                b.mesh.material.dispose();\n                                this.bullets.splice(i,1);\n                                break;\n                            }\n                        }\n                    }\n                    if (b.age >= b.life) {\n                        this.scene.remove(b.mesh);\n                        b.mesh.geometry.dispose();\n                        b.mesh.material.dispose();\n                        this.bullets.splice(i,1);\n                    }\n                }\n                // 枪口火光\n                for (let i = this.muzzleFlashes.length-1; i>=0; i--) {\n                    const f = this.muzzleFlashes[i];\n                    f.age += deltaTime;\n                    const p = f.age / f.life;\n                    f.mesh.scale.setScalar(1 + p*5);\n                    f.mesh.material.transparent = true;\n                    f.mesh.material.opacity = 1 - p;\n                    if (f.age >= f.life) {\n                        this.scene.remove(f.mesh);\n                        f.mesh.geometry.dispose();\n                        f.mesh.material.dispose();\n                        this.muzzleFlashes.splice(i,1);\n                    }\n                }\n            }\n\n            // ==== 敌方射击系统 ====\n            createEnemyBullet(position, targetPosition, speed = 400) {\n                // Create bullet geometry and material (same as player bullets)\n                const geometry = new THREE.SphereGeometry(0.45, 10, 10);\n                const material = new THREE.MeshBasicMaterial({ \n                    color: 0xfff066, // Same yellow color as player bullets\n                    transparent: true,\n                    opacity: 0.95\n                });\n                const mesh = new THREE.Mesh(geometry, material);\n                \n                // Position bullet at origin\n                mesh.position.copy(position);\n                \n                // Calculate direction to target with some inaccuracy\n                const direction = new THREE.Vector3()\n                    .subVectors(targetPosition, position)\n                    .normalize();\n                \n                // Add to scene\n                this.scene.add(mesh);\n                \n                // Create bullet object\n                const bullet = {\n                    mesh: mesh,\n                    velocity: direction.multiplyScalar(speed),\n                    age: 0,\n                    life: 3.0 // 3 seconds life\n                };\n                \n                this.enemyBullets.push(bullet);\n                \n                return bullet;\n            }\n            \n            createEnemyMuzzleFlash(position) {\n                // Create muzzle flash with same style as player\n                const flashGeo = new THREE.SphereGeometry(0.2, 8, 8);\n                const flashMat = new THREE.MeshBasicMaterial({ color: 0xffdd44 });\n                const flash = new THREE.Mesh(flashGeo, flashMat);\n                flash.position.copy(position);\n                this.scene.add(flash);\n                this.muzzleFlashes.push({ mesh: flash, age: 0, life: 0.12 });\n            }\n\n            updateEnemyBullets(deltaTime) {\n                for (let i = this.enemyBullets.length - 1; i >= 0; i--) {\n                    const bullet = this.enemyBullets[i];\n                    bullet.age += deltaTime;\n                    \n                    // Move bullet\n                    bullet.mesh.position.addScaledVector(bullet.velocity, deltaTime);\n                    \n                    // Fade out over time\n                    const t = bullet.age / bullet.life;\n                    if (t > 0.7) {\n                        bullet.mesh.material.opacity = 0.9 * (1 - (t - 0.7) / 0.3);\n                    }\n                    \n                    // Check collision with player aircraft\n                    const distanceToPlayer = bullet.mesh.position.distanceTo(this.playerPosition);\n                    if (distanceToPlayer < 15 && this.aircraft) { // Hit radius\n                        // Damage player\n                        this.playerHealth = Math.max(0, this.playerHealth - 2);\n                        this.updatePlayerHealthDisplay();\n                        this.createPlayerHitEffect();\n                        \n                        // Check if player is dead\n                        if (this.playerHealth <= 0) {\n                            this.handlePlayerDeath();\n                        }\n                        \n                        // Remove bullet\n                        this.scene.remove(bullet.mesh);\n                        bullet.mesh.geometry.dispose();\n                        bullet.mesh.material.dispose();\n                        this.enemyBullets.splice(i, 1);\n                        continue;\n                    }\n                    \n                    // Remove old bullets\n                    if (bullet.age >= bullet.life) {\n                        this.scene.remove(bullet.mesh);\n                        bullet.mesh.geometry.dispose();\n                        bullet.mesh.material.dispose();\n                        this.enemyBullets.splice(i, 1);\n                    }\n                }\n            }\n\n            createPlayerHitEffect() {\n                // Visual effect when player gets hit\n                const flash = document.createElement('div');\n                flash.style.cssText = `\n                    position: fixed; top: 0; left: 0; width: 100%; height: 100%;\n                    background: radial-gradient(circle, rgba(255,0,0,0.3) 0%, transparent 50%);\n                    pointer-events: none; z-index: 9999;\n                `;\n                document.body.appendChild(flash);\n                \n                setTimeout(() => {\n                    flash.remove();\n                }, 150);\n            }\n            \n            handlePlayerDeath() {\n                // Show game over message\n                const gameOverDiv = document.createElement('div');\n                gameOverDiv.style.cssText = `\n                    position: fixed; top: 0; left: 0; width: 100%; height: 100%;\n                    background: rgba(0, 0, 0, 0.8); backdrop-filter: blur(10px);\n                    display: flex; flex-direction: column; justify-content: center; align-items: center;\n                    z-index: 10000; color: white; font-family: 'Segoe UI', sans-serif;\n                `;\n                \n                gameOverDiv.innerHTML = `\n                    <h1 style=\"font-size: 48px; margin-bottom: 20px; color: #ff4444; text-shadow: 0 0 20px rgba(255, 68, 68, 0.8);\">GAME OVER</h1>\n                    <p style=\"font-size: 20px; margin-bottom: 30px;\">Your aircraft was shot down!</p>\n                    <button onclick=\"location.reload()\" style=\"\n                        padding: 12px 30px; font-size: 18px; background: linear-gradient(135deg, #ff4444, #cc3333);\n                        border: none; border-radius: 8px; color: white; cursor: pointer; font-weight: 600;\n                        box-shadow: 0 4px 15px rgba(255, 68, 68, 0.3); transition: transform 0.2s;\n                    \" onmouseover=\"this.style.transform='scale(1.05)'\" onmouseout=\"this.style.transform='scale(1)'\">\n                        Restart Game\n                    </button>\n                `;\n                \n                document.body.appendChild(gameOverDiv);\n                \n                // Stop the game loop (optional - you might want to keep some systems running)\n                // this.gameRunning = false;\n            }\n\n            // Calculate lead target position for enemy shooting\n            calculateLeadTarget(shooterPos, targetPos, targetVel, bulletSpeed, accuracy) {\n                // Basic predictive aiming\n                const distance = shooterPos.distanceTo(targetPos);\n                const timeToTarget = distance / bulletSpeed;\n                \n                // Predict where target will be\n                const predictedPos = targetPos.clone().addScaledVector(targetVel, timeToTarget);\n                \n                // Add inaccuracy based on accuracy parameter\n                const inaccuracy = (1.0 - accuracy) * 100; // Convert to units\n                predictedPos.add(new THREE.Vector3(\n                    (Math.random() - 0.5) * inaccuracy,\n                    (Math.random() - 0.5) * inaccuracy * 0.5, // Less vertical spread\n                    (Math.random() - 0.5) * inaccuracy\n                ));\n                \n                return predictedPos;\n            }\n\n            // ==== 战舰相关 ====\n            createWarships(count=5){\n                for(let i=0;i<count;i++){\n                    const x = (Math.random()-0.5)*6500;\n                    const z = (Math.random()-0.5)*6500;\n                    if (Math.hypot(x,z) < 600) { i--; continue; }\n                    const ship = this.createWarship(x,z);\n                    this.warships.push(ship);\n                }\n            }\n            createWarship(x,z){\n                const g = new THREE.Group();\n                // 船体梭形 + 甲板\n                const hullLen = 160 + Math.random()*60;\n                const hullWidth = 22 + Math.random()*6;\n                const hullHeight = 10;\n                // 梭形 hull: 由一个长盒再用缩放形成纺锤（中宽，两端逐渐变细）\n                const spindleGeo = new THREE.BoxGeometry(hullWidth, hullHeight, hullLen, 8,1,16);\n                // 手动顶点调整：根据Z距离中心缩放X,Y 形成平滑梭形\n                const pos = spindleGeo.attributes.position;\n                for(let i=0;i<pos.count;i++){\n                    const z = pos.getZ(i);\n                    const nz = Math.abs(z)/(hullLen/2); // 0..1\n                    const taper = 1 - Math.pow(nz,1.4); // 中央最大\n                    pos.setX(i, pos.getX(i)* (0.55 + 0.45*taper));\n                    pos.setY(i, pos.getY(i)* (0.55 + 0.45*taper));\n                }\n                spindleGeo.computeVertexNormals();\n                const hullMat = new THREE.MeshStandardMaterial({ color:0x3f454c, metalness:0.25, roughness:0.85 });\n                const spindle = new THREE.Mesh(spindleGeo, hullMat);\n                spindle.position.y = -41; // 大部分浸入水下，少量露出\n                spindle.castShadow = true; spindle.receiveShadow = true;\n                g.add(spindle);\n                // 上层甲板（略短）\n                const deck = new THREE.Mesh(new THREE.BoxGeometry(hullWidth*0.9,4,hullLen*0.62), new THREE.MeshStandardMaterial({ color:0x676d75, metalness:0.25, roughness:0.6 }));\n                deck.position.set(0, -36.2, 0); // 露出水面\n                deck.castShadow = true; g.add(deck);\n                // 指挥塔 + 雷达简化\n                const tower = new THREE.Mesh(new THREE.BoxGeometry(hullWidth*0.4,14,hullLen*0.18), new THREE.MeshStandardMaterial({ color:0x7a8088 }));\n                tower.position.set(0, deck.position.y + 9, -hullLen*0.08);\n                tower.castShadow = true; g.add(tower);\n                const radar = new THREE.Mesh(new THREE.CylinderGeometry(0.5,0.5,6,12), new THREE.MeshStandardMaterial({ color:0xd9d9d9 }));\n                radar.position.set(0, tower.position.y + 10, -hullLen*0.08);\n                radar.rotation.x = Math.PI/2; g.add(radar);\n                // 桅杆（高度7）\n                const mastHeight = 7;\n                const mast = new THREE.Mesh(new THREE.CylinderGeometry(0.6,0.8,mastHeight,10), new THREE.MeshStandardMaterial({ color:0xdddddd, metalness:0.4, roughness:0.5 }));\n                mast.position.set(0, deck.position.y + mastHeight/2 + 2, 0);\n                mast.castShadow = true; g.add(mast);\n                // 红色箭头指示器（与坦克风格统一）\n                const arrowGroup = new THREE.Group();\n                const arrowMat = new THREE.MeshBasicMaterial({ color:0xff2222 });\n                const cone = new THREE.Mesh(new THREE.ConeGeometry(3.2,9,18), arrowMat);\n                cone.rotation.x = Math.PI; arrowGroup.add(cone);\n                const stem = new THREE.Mesh(new THREE.CylinderGeometry(0.45,0.45,4.5,12), arrowMat);\n                stem.position.y = -6.5; arrowGroup.add(stem);\n                arrowGroup.position.set(0, deck.position.y + 18, 0);\n                arrowGroup.userData = { pulsePhase: Math.random()*Math.PI*2 };\n                g.add(arrowGroup);\n                // 炮塔 (前后各一个简化)\n                const turretMat = new THREE.MeshStandardMaterial({ color:0x5b6068, metalness:0.3, roughness:0.6 });\n                const shipTurretGeo = new THREE.CylinderGeometry(6,6,4,12);\n                const mkTurret1 = new THREE.Mesh(shipTurretGeo, turretMat); mkTurret1.position.set(0, deck.position.y + 3, hullLen*0.18); mkTurret1.castShadow=true; g.add(mkTurret1);\n                const mkTurret2 = new THREE.Mesh(shipTurretGeo, turretMat); mkTurret2.position.set(0, deck.position.y + 3, -hullLen*0.25); mkTurret2.castShadow=true; g.add(mkTurret2);\n                // 炮管双联\n                const barrelGeo = new THREE.CylinderGeometry(0.7,0.9,18,12);\n                [mkTurret1, mkTurret2].forEach((tur,idx)=>{\n                    for(let b=0;b<2;b++){\n                        const barrel = new THREE.Mesh(barrelGeo, new THREE.MeshStandardMaterial({ color:0x3a3d42, metalness:0.5, roughness:0.4 }));\n                        barrel.rotation.x = Math.PI/2;\n                        barrel.position.set((b===0? -1.2:1.2), tur.position.y, tur.position.z + (idx===0? 8: -8));\n                        barrel.position.y += 2;\n                        g.add(barrel);\n                    }\n                });\n                g.position.set(x,0,z);\n                this.scene.add(g);\n                \n                // Create health bar for ship\n                const healthBar = this.createHealthBar();\n                const maxHealth = 6; // Ships are tougher than tanks\n                \n                return { \n                    mesh: g, \n                    alive: true, \n                    radius: hullWidth*2, \n                    indicator: arrowGroup,\n                    // Health system\n                    health: maxHealth,\n                    maxHealth: maxHealth,\n                    healthBar: healthBar,\n                    // Warship shooting properties\n                    lastShotTime: 0,\n                    shootingRange: 1000, // Reduced range\n                    fireRate: 3.0 + Math.random() * 2.0, // 3.0-5.0 seconds between shots (slower)\n                    accuracy: 0.4 + Math.random() * 0.2 // 40-60% accuracy (less accurate)\n                };\n            }\n            createSeaScorch(x,z){\n                const r = 18 + Math.random()*12;\n                const geo = new THREE.CircleGeometry(r, 22);\n                const mat = new THREE.MeshBasicMaterial({ color:0x000000, transparent:true, opacity:0.25 });\n                const scorch = new THREE.Mesh(geo, mat);\n                scorch.rotation.x = -Math.PI/2;\n                scorch.position.set(x, -39.9, z);\n                this.scene.add(scorch);\n                setTimeout(()=>{ this.scene.remove(scorch); geo.dispose(); mat.dispose(); }, 8000);\n            }\n\n            // === 环境系统函数 ===\n            \n            createTrees() {\n                const m = this.environmentConfig.treeDensityMultiplier;\n                this.createDenseForest(-2500, -2000, 800, 600, 'pine', Math.round(80*m));\n                this.createDenseForest(1800, 1500, 700, 500, 'oak', Math.round(70*m));\n                this.createMediumForest(-1000, 2200, 900, 700, 'mixed', Math.round(45*m));\n                this.createMediumForest(2200, -800, 600, 800, 'birch', Math.round(40*m));\n                this.createSparseForest(-3000, 0, 1200, 800, 'oak', Math.round(25*m));\n                this.createSparseForest(0, -2800, 1000, 600, 'pine', Math.round(20*m));\n                this.createSparseForest(1000, 3000, 800, 600, 'palm', Math.round(15*m));\n                for (let i = 0; i < Math.round(100*m); i++) {\n                    const x = (Math.random()-0.5)*7000;\n                    const z = (Math.random()-0.5)*7000;\n                    const treeType = ['pine','oak','birch','palm'][Math.floor(Math.random()*4)];\n                    this.createTree(x,z,treeType);\n                }\n            }\n\n            // 密集森林 - 树木紧密排列\n            createDenseForest(centerX, centerZ, width, depth, forestType, treeCount) {\n                for (let i = 0; i < treeCount; i++) {\n                    // 使用聚集分布，模拟真实森林\n                    const clusterX = centerX + (Math.random() - 0.5) * width * 0.8;\n                    const clusterZ = centerZ + (Math.random() - 0.5) * depth * 0.8;\n                    \n                    // 在聚集点周围随机分布\n                    const offsetX = (Math.random() - 0.5) * 50;\n                    const offsetZ = (Math.random() - 0.5) * 50;\n                    \n                    this.createTree(clusterX + offsetX, clusterZ + offsetZ, forestType);\n                }\n            }\n\n            // 中等密度森林\n            createMediumForest(centerX, centerZ, width, depth, forestType, treeCount) {\n                for (let i = 0; i < treeCount; i++) {\n                    const x = centerX + (Math.random() - 0.5) * width;\n                    const z = centerZ + (Math.random() - 0.5) * depth;\n                    \n                    // 随机跳过一些位置，创造空隙\n                    if (Math.random() > 0.3) {\n                        this.createTree(x, z, forestType);\n                    }\n                }\n            }\n\n            // 稀疏森林\n            createSparseForest(centerX, centerZ, width, depth, forestType, treeCount) {\n                for (let i = 0; i < treeCount; i++) {\n                    const x = centerX + (Math.random() - 0.5) * width;\n                    const z = centerZ + (Math.random() - 0.5) * depth;\n                    \n                    // 稀疏分布，更多空旷区域\n                    if (Math.random() > 0.6) {\n                        this.createTree(x, z, forestType);\n                    }\n                }\n            }\n\n            // === 湖泊系统（替换原先的河流系统） ===\n            createLakes() {\n                // 创建多个不同大小与形状的湖泊\n                const lakeConfigs = [\n                    { x: -1500, z: -1200, radius: 350, color: 0x3A87BD }, // 大湖\n                    { x: 1200, z: 800, radius: 250, color: 0x357EBA },   // 中型湖\n                    { x: 400, z: -1400, radius: 180, color: 0x2F6FAF },  // 中小湖\n                    { x: -800, z: 1600, radius: 200, color: 0x337BB5 },  // 森林湖\n                    { x: 1800, z: -600, radius: 150, color: 0x2E75AA }   // 丘陵湖\n                ];\n\n                lakeConfigs.forEach(cfg => this.createLake(cfg.x, cfg.z, cfg.radius, cfg.color));\n\n                // 生成一些随机小湖/池塘\n                for (let i = 0; i < 6; i++) {\n                    const x = (Math.random() - 0.5) * 6000;\n                    const z = (Math.random() - 0.5) * 6000;\n                    const r = 80 + Math.random() * 140;\n                    this.createLake(x, z, r, 0x2F6FAF);\n                }\n            }\n\n            createLake(centerX, centerZ, radius, color) {\n                // 使用细分圆形并随机扰动顶点制造自然外形\n                const segments = 48;\n                const geometry = new THREE.CircleGeometry(radius, segments);\n                const pos = geometry.attributes.position;\n                for (let i = 0; i < pos.count; i++) {\n                    if (i === 0) continue; // 跳过中心点\n                    const vx = pos.getX(i);\n                    const vy = pos.getY(i);\n                    const r = Math.sqrt(vx * vx + vy * vy);\n                    const deform = 1 + (Math.random() - 0.5) * 0.15; // 轻微形变\n                    pos.setX(i, vx * deform);\n                    pos.setY(i, vy * deform);\n                }\n                pos.needsUpdate = true;\n\n                // 添加轻微波浪法线效果（顶点抖动可选）\n                geometry.computeVertexNormals();\n\n                const material = new THREE.MeshLambertMaterial({\n                    color,\n                    transparent: true,\n                    opacity: 0.9,\n                    side: THREE.DoubleSide\n                });\n\n                const lake = new THREE.Mesh(geometry, material);\n                lake.rotation.x = -Math.PI / 2;\n                lake.position.set(centerX, -46, centerZ); // 与地面稍微凹陷一点\n                lake.receiveShadow = true;\n                this.scene.add(lake);\n\n                // 环湖植被：在湖泊外圈随机生成树木和灌木\n                const ringCount = Math.floor(radius / 20);\n                for (let i = 0; i < ringCount; i++) {\n                    const angle = Math.random() * Math.PI * 2;\n                    const dist = radius + 30 + Math.random() * 120;\n                    const x = centerX + Math.cos(angle) * dist;\n                    const z = centerZ + Math.sin(angle) * dist;\n                    const types = ['birch', 'oak', 'pine'];\n                    this.createTree(x, z, types[Math.floor(Math.random() * types.length)]);\n                }\n            }\n\n            createTree(x, z, treeType = 'oak') {\n                const treeGroup = new THREE.Group();\n                \n                // Ocean scene: Generate raised sandy islands (cone-like) under trees\n                if (this.sceneType === 'ocean') {\n                    const baseRadius = treeType === 'palm' ? 30 : 22;\n                    const islandRadiusTop = baseRadius * 0.7;\n                    const islandRadiusBottom = baseRadius + Math.random() * (treeType === 'palm' ? 18 : 10);\n                    const height = 8 + Math.random()*4; // 明显高于水面 (水面 ~ -40)\n                    const geo = new THREE.CylinderGeometry(islandRadiusTop, islandRadiusBottom, height, 24, 1, false);\n                    geo.translate(0, height/2, 0);\n                    const sandColor = new THREE.Color().setHSL(0.12 + Math.random()*0.04, 0.55, 0.62); // 亮黄沙\n                    const island = new THREE.Mesh(geo, new THREE.MeshLambertMaterial({ color: sandColor }));\n                    island.position.set(x, -50, z); // 底部贴近原虚拟地平 (-50)\n                    island.castShadow = true; island.receiveShadow = true;\n                    island.userData.isIsland = true;\n                    // 顶部再加一圈更浅的沙滩边缘\n                    const rimGeo = new THREE.CylinderGeometry(islandRadiusTop*1.05, islandRadiusTop*1.25, 1.2, 24, 1, false);\n                    const rim = new THREE.Mesh(rimGeo, new THREE.MeshLambertMaterial({ color: 0xF5E7A1 }));\n                    rim.position.y = height + -50 - 0.4; // 贴近顶部\n                    rim.receiveShadow = true;\n                    island.add(rim);\n                    this.scene.add(island);\n                }\n\n                let trunkHeight, trunkRadius;\n                \n                switch(treeType) {\n                    case 'pine': // 优美的松树\n                        trunkHeight = 15 + Math.random() * 10;\n                        trunkRadius = 0.6 + Math.random() * 0.3;\n                        \n                        // 松树树干 - 自然棕色\n                        const pineTrunkGeometry = new THREE.CylinderGeometry(\n                            trunkRadius * 0.7, trunkRadius * 1.2, trunkHeight, 8\n                        );\n                        const pineTrunkMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0x8B4513 // 温暖的棕色\n                        });\n                        const pineTrunk = new THREE.Mesh(pineTrunkGeometry, pineTrunkMaterial);\n                        pineTrunk.position.y = trunkHeight / 2 - 50;\n                        pineTrunk.castShadow = true;\n                        treeGroup.add(pineTrunk);\n                        \n                        // 松树层状树冠 - 深绿到浅绿渐变\n                        const greenShades = [0x0F4F0F, 0x228B22, 0x32CD32, 0x90EE90];\n                        for (let layer = 0; layer < 5; layer++) {\n                            const layerRadius = 5 - layer * 0.7;\n                            const layerHeight = 3.5 + Math.random() * 0.5;\n                            const crownGeometry = new THREE.ConeGeometry(layerRadius, layerHeight, 8);\n                            const crownMaterial = new THREE.MeshLambertMaterial({ \n                                color: greenShades[Math.min(layer, 3)]\n                            });\n                            const crownLayer = new THREE.Mesh(crownGeometry, crownMaterial);\n                            crownLayer.position.y = trunkHeight - 50 + layer * 2.8;\n                            crownLayer.castShadow = true;\n                            treeGroup.add(crownLayer);\n                        }\n                        break;\n                        \n                    case 'oak': // 雄伟的橡树\n                        trunkHeight = 10 + Math.random() * 8;\n                        trunkRadius = 1.2 + Math.random() * 0.6;\n                        \n                        // 橡树粗壮树干 - 深棕色\n                        const oakTrunkGeometry = new THREE.CylinderGeometry(\n                            trunkRadius * 0.8, trunkRadius * 1.4, trunkHeight, 8\n                        );\n                        const oakTrunkMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0x654321 // 深棕色\n                        });\n                        const oakTrunk = new THREE.Mesh(oakTrunkGeometry, oakTrunkMaterial);\n                        oakTrunk.position.y = trunkHeight / 2 - 50;\n                        oakTrunk.castShadow = true;\n                        treeGroup.add(oakTrunk);\n                        \n                        // 橡树茂密树冠 - 多层结构\n                        const mainCrownGeometry = new THREE.SphereGeometry(6 + Math.random() * 2, 10, 8);\n                        mainCrownGeometry.scale(1.4, 0.9, 1.4); // 压扁的宽阔树冠\n                        const mainCrownMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0x228B22 // 森林绿\n                        });\n                        const mainCrown = new THREE.Mesh(mainCrownGeometry, mainCrownMaterial);\n                        mainCrown.position.y = trunkHeight - 50 + 4;\n                        mainCrown.castShadow = true;\n                        treeGroup.add(mainCrown);\n                        \n                        // 额外的小树冠增加层次感\n                        for (let i = 0; i < 3; i++) {\n                            const smallCrownGeometry = new THREE.SphereGeometry(2 + Math.random(), 8, 6);\n                            const smallCrownMaterial = new THREE.MeshLambertMaterial({ \n                                color: 0x32CD32 // 较亮的绿色\n                            });\n                            const smallCrown = new THREE.Mesh(smallCrownGeometry, smallCrownMaterial);\n                            smallCrown.position.set(\n                                (Math.random() - 0.5) * 8,\n                                trunkHeight - 50 + 3 + Math.random() * 3,\n                                (Math.random() - 0.5) * 8\n                            );\n                            smallCrown.castShadow = true;\n                            treeGroup.add(smallCrown);\n                        }\n                        break;\n                        \n                    case 'birch': // 优雅的桦树\n                        trunkHeight = 12 + Math.random() * 6;\n                        trunkRadius = 0.4 + Math.random() * 0.2;\n                        \n                        // 桦树细长白色树干\n                        const birchTrunkGeometry = new THREE.CylinderGeometry(\n                            trunkRadius * 0.9, trunkRadius * 1.1, trunkHeight, 8\n                        );\n                        const birchTrunkMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0xF5F5DC // 优雅的米色白\n                        });\n                        const birchTrunk = new THREE.Mesh(birchTrunkGeometry, birchTrunkMaterial);\n                        birchTrunk.position.y = trunkHeight / 2 - 50;\n                        birchTrunk.castShadow = true;\n                        treeGroup.add(birchTrunk);\n                        \n                        // 桦树垂柳状树冠\n                        const birchCrownGeometry = new THREE.SphereGeometry(4 + Math.random() * 1.5, 8, 6);\n                        birchCrownGeometry.scale(1.2, 1.4, 1.2); // 稍微拉长\n                        const birchCrownMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0x9ACD32 // 黄绿色\n                        });\n                        const birchCrown = new THREE.Mesh(birchCrownGeometry, birchCrownMaterial);\n                        birchCrown.position.y = trunkHeight - 50 + 3;\n                        birchCrown.castShadow = true;\n                        treeGroup.add(birchCrown);\n                        break;\n                        \n                    case 'palm': // 热带棕榈树\n                        trunkHeight = 14 + Math.random() * 8;\n                        trunkRadius = 0.8;\n                        \n                        // 棕榈树弯曲树干\n                        const palmTrunkGeometry = new THREE.CylinderGeometry(\n                            trunkRadius * 0.6, trunkRadius, trunkHeight, 8\n                        );\n                        const palmTrunkMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0xD2691E // 温暖的橙棕色\n                        });\n                        const palmTrunk = new THREE.Mesh(palmTrunkGeometry, palmTrunkMaterial);\n                        palmTrunk.position.y = trunkHeight / 2 - 50;\n                        palmTrunk.rotation.z = (Math.random() - 0.5) * 0.4; // 轻微倾斜\n                        palmTrunk.castShadow = true;\n                        treeGroup.add(palmTrunk);\n                        \n                        // 棕榈叶 - 更真实的造型\n                        for (let leaf = 0; leaf < 12; leaf++) {\n                            const leafGeometry = new THREE.CylinderGeometry(0.1, 0.4, 7, 4);\n                            const leafMaterial = new THREE.MeshLambertMaterial({ \n                                color: 0x228B22 // 热带绿\n                            });\n                            const palmLeaf = new THREE.Mesh(leafGeometry, leafMaterial);\n                            const angle = (leaf / 12) * Math.PI * 2;\n                            const radius = 2.5 + Math.random() * 0.5;\n                            palmLeaf.position.set(\n                                Math.cos(angle) * radius,\n                                trunkHeight - 50 + 3,\n                                Math.sin(angle) * radius\n                            );\n                            palmLeaf.rotation.z = angle + Math.PI / 2.5; // 向外弯曲\n                            palmLeaf.rotation.x = (Math.random() - 0.5) * 0.3; // 随机倾斜\n                            palmLeaf.castShadow = true;\n                            treeGroup.add(palmLeaf);\n                        }\n                        break;\n                        \n                    case 'mixed':\n                        // 混合林中随机选择树种\n                        const mixedTypes = ['pine', 'oak', 'birch'];\n                        return this.createTree(x, z, mixedTypes[Math.floor(Math.random() * mixedTypes.length)]);\n                }\n                \n                // 添加轻微随机旋转，增加自然感\n                treeGroup.rotation.y = Math.random() * Math.PI * 2;\n                treeGroup.position.set(x, 0, z);\n                this.scene.add(treeGroup);\n            }\n\n            // === Extra Environment Helpers ===\n            createBushCluster(x,z,count=8){\n                for (let i=0;i<count;i++){\n                    const r = 2 + Math.random()*2.5;\n                    const g = new THREE.SphereGeometry(r, 8, 6);\n                    const c = new THREE.Color().setHSL(0.28 + Math.random()*0.08, 0.6, 0.35+Math.random()*0.2);\n                    const m = new THREE.MeshLambertMaterial({ color: c });\n                    const bush = new THREE.Mesh(g,m);\n                    const ang = Math.random()*Math.PI*2;\n                    const dist = Math.random()*8;\n                    bush.position.set(x + Math.cos(ang)*dist, -50 + r*0.5, z + Math.sin(ang)*dist);\n                    bush.castShadow = true;\n                    this.scene.add(bush);\n                }\n            }\n\n            createRocks(count){\n                for (let i=0;i<count;i++){\n                    const s = 3 + Math.random()*10;\n                    const g = new THREE.DodecahedronGeometry(s, 0);\n                    const col = new THREE.Color().setHSL(0.08 + Math.random()*0.05, 0.2, 0.25 + Math.random()*0.2);\n                    const m = new THREE.MeshLambertMaterial({ color: col });\n                    const rock = new THREE.Mesh(g,m);\n                    rock.position.set((Math.random()-0.5)*7600, -50 + s*0.5, (Math.random()-0.5)*7600);\n                    rock.rotation.y = Math.random()*Math.PI*2;\n                    rock.castShadow = true;\n                    this.scene.add(rock);\n                }\n            }\n\n            createGrassPatches(count){\n                for (let i=0;i<count;i++){\n                    const blades = new THREE.Group();\n                    const baseX = (Math.random()-0.5)*7600;\n                    const baseZ = (Math.random()-0.5)*7600;\n                    const bladeCount = 4 + Math.random()*6;\n                    for (let b=0;b<bladeCount;b++){\n                        const h = 4 + Math.random()*6;\n                        const geo = new THREE.CylinderGeometry(0.05,0.25,h,4,1);\n                        const mat = new THREE.MeshLambertMaterial({ color: 0x3c8d1e });\n                        const blade = new THREE.Mesh(geo,mat);\n                        blade.position.set((Math.random()-0.5)*3, -50 + h/2, (Math.random()-0.5)*3);\n                        blade.rotation.x = (Math.random()-0.5)*0.4;\n                        blade.rotation.z = (Math.random()-0.5)*0.4;\n                        blades.add(blade);\n                    }\n                    blades.position.set(baseX,0,baseZ);\n                    this.scene.add(blades);\n                }\n            }\n\n            createBirdFlock(){\n                const flock = new THREE.Group();\n                const count = 12 + Math.floor(Math.random()*8);\n                for (let i=0;i<count;i++){\n                    const geo = new THREE.ConeGeometry(1.2,3,4);\n                    const mat = new THREE.MeshBasicMaterial({ color: 0x222222 });\n                    const bird = new THREE.Mesh(geo,mat);\n                    bird.rotation.x = Math.PI/2;\n                    bird.position.set((Math.random()-0.5)*30,(Math.random()-0.5)*10,(Math.random()-0.5)*30);\n                    flock.add(bird);\n                }\n                flock.position.set((Math.random()-0.5)*6000,150 + Math.random()*250,(Math.random()-0.5)*6000);\n                flock.userData = { speed: 20 + Math.random()*15, dir: new THREE.Vector3(Math.random()-0.5,0,Math.random()-0.5).normalize() };\n                this.scene.add(flock);\n                if(!this.flocks) this.flocks=[];\n                this.flocks.push(flock);\n            }\n\n            updateFlocks(delta){\n                if(!this.flocks) return;\n                this.flocks.forEach(f=>{\n                    f.position.addScaledVector(f.userData.dir, f.userData.speed*delta);\n                    f.position.y += Math.sin(Date.now()*0.001 + f.position.x*0.01)*0.2;\n                    const limit = 4000;\n                    if (f.position.x > limit) f.position.x = -limit;\n                    if (f.position.x < -limit) f.position.x = limit;\n                    if (f.position.z > limit) f.position.z = -limit;\n                    if (f.position.z < -limit) f.position.z = limit;\n                });\n            }\n\n            createSoilPatches(count){\n                for (let i=0;i<count;i++){\n                    const r = 40 + Math.random()*120;\n                    const geo = new THREE.CircleGeometry(r, 24);\n                    const posAttr = geo.attributes.position;\n                    for (let v=0; v<posAttr.count; v++) { // 轻微扰动边缘\n                        if (v===0) continue;\n                        const x = posAttr.getX(v); const y = posAttr.getY(v);\n                        const dist = Math.hypot(x,y);\n                        const factor = 1 + (Math.random()-0.5)*0.25;\n                        posAttr.setX(v, x * factor);\n                        posAttr.setY(v, y * factor);\n                    }\n                    posAttr.needsUpdate = true;\n                    const colors = [0x7b5e31,0x6b4a1f,0xa07547,0x8a6235];\n                    const mat = new THREE.MeshLambertMaterial({ color: colors[Math.floor(Math.random()*colors.length)], side: THREE.DoubleSide, opacity: 0.92, transparent: true });\n                    const patch = new THREE.Mesh(geo, mat);\n                    patch.rotation.x = -Math.PI/2;\n                    patch.position.set((Math.random()-0.5)*7600, -49.9, (Math.random()-0.5)*7600);\n                    patch.receiveShadow = true;\n                    this.scene.add(patch);\n                }\n            }\n\n            // ================= Tanks =================\n            getGroundHeight(x,z){\n                if(!this.ground) return -50;\n                this.raycaster.set(new THREE.Vector3(x, 500, z), new THREE.Vector3(0,-1,0));\n                const hit = this.raycaster.intersectObject(this.ground, false);\n                return hit.length ? hit[0].point.y : -50;\n            }\n\n            alignTankToGround(group){\n                // 计算履带/底座假定基准：我们将 group 的局部原点视为底座中心高度 (approx hull center -2.5)\n                // 使用射线获得真实地面，然后设置 group.position.y 使底面离地面略微“悬空” 0.4\n                const gY = this.getGroundHeight(group.position.x, group.position.z);\n                // 由于 hull.position.y = -50 + 2.5 (在构造中)，group.position.y 初始为 0 时 hull 底部在 -50\n                // 因此当 group.position.y 偏移 d 时，底部 = -50 + d\n                // 我们希望底部 = gY + 4.0 （抬离地面 4 单位）\n                const desiredBottom = gY + 4.0;\n                const d = desiredBottom - (-50);\n                group.position.y = d;\n            }\n            createTanks(count=10){\n                for (let i=0;i<count;i++) {\n                    const x = (Math.random()-0.5)*7000;\n                    const z = (Math.random()-0.5)*7000;\n                    // 避免离玩家出生点太近\n                    if (Math.hypot(x, z) < 400) { i--; continue; }\n                    const tank = this.createTank(x, z);\n                    this.tanks.push(tank);\n                }\n                // 创建后统一对齐一次（冗余安全）\n                this.tanks.forEach(t=> this.alignTankToGround(t.mesh));\n            }\n\n            createTank(x,z){\n                const group = new THREE.Group();\n                const palette = [0x4d5a34,0x556b2f,0x6e5b2e,0x5c6133];\n                const baseColor = palette[Math.floor(Math.random()*palette.length)];\n                const baseMat = new THREE.MeshStandardMaterial({ color: baseColor, metalness:0.25, roughness:0.75 });\n\n                // === 矩形底座 (narrower & taller) ===\n                const hullWidth = 24; // narrower (was 30)\n                const hullHeight = 8; // taller (was 5)\n                const hullLength = 46;\n                const hull = new THREE.Mesh(new THREE.BoxGeometry(hullWidth, hullHeight, hullLength), baseMat);\n                hull.position.y = -50 + hullHeight/2;\n                hull.castShadow = true; hull.receiveShadow = true;\n                group.add(hull);\n\n                // === 履带与5个负重轮（每侧） ===\n                const trackMat = new THREE.MeshStandardMaterial({ color:0x1d1d1d, roughness:0.95 });\n                for (let side of [-1,1]){\n                    const track = new THREE.Mesh(new THREE.BoxGeometry(4, hullHeight-1.8, hullLength), trackMat);\n                    track.position.set(side*(hullWidth/2+3.2), -50 + (hullHeight-1.8)/2, 0);\n                    track.castShadow = true; group.add(track);\n                }\n                const wheelGeo = new THREE.CylinderGeometry(2.4,2.4,1.4,18);\n                const wheelMat = new THREE.MeshStandardMaterial({ color:0x3a3a3a, metalness:0.4, roughness:0.6 });\n                const wheelZs = [-14,-7,0,7,14];\n                for (let side of [-1,1]){\n                    wheelZs.forEach(zv=>{\n                        const w = new THREE.Mesh(wheelGeo, wheelMat);\n                        w.rotation.z = Math.PI/2;\n                        w.position.set(side*(hullWidth/2+3.2), -50 + 1.6, zv);\n                        group.add(w);\n                    });\n                }\n\n                // === 圆柱炮塔 ===\n                const turretHeight = 9; // 增高炮塔 (原 4 -> 7 -> 9)\n                const turret = new THREE.Mesh(new THREE.CylinderGeometry(10,10,turretHeight,24), baseMat);\n                const turretY = -50 + 2.5 + 2.5 + turretHeight/2; // 底座顶面 + 炮塔一半高度 (仍使用旧底盘高度逻辑)\n                turret.position.set(0, turretY, 0);\n                turret.castShadow = true; turret.receiveShadow = true;\n                group.add(turret);\n                // === 顶部舱门（圆形圆柱，高度2 半径2） ===\n                const hatchGeo = new THREE.CylinderGeometry(2,2,2,24);\n                const hatchMat = new THREE.MeshStandardMaterial({ color: baseColor });\n                const hatch = new THREE.Mesh(hatchGeo, hatchMat);\n                hatch.position.set(0, turretY + turretHeight/2 + 1, 0); // 放在炮塔顶部正中\n                hatch.castShadow = true; hatch.receiveShadow = true;\n                group.add(hatch);\n\n                // === 主武器或防空机枪配置 ===\n                const aaVariant = Math.random() < 0.30; // 30% 防空坦克\n                if (!aaVariant) {\n                    // 常规炮管（从炮塔中心 35° 抬起）\n                    const gunPivot = new THREE.Group();\n                    gunPivot.name = 'gunPivot'; // Set name for wreck conversion\n                    gunPivot.position.set(0, turretY, 0);\n                    group.add(gunPivot);\n                    const barrelMat = new THREE.MeshStandardMaterial({ color:0x2d2d2d, metalness:0.6, roughness:0.45 });\n                    const barrelLength = 26;\n                    const barrel = new THREE.Mesh(new THREE.CylinderGeometry(0.6,0.85,barrelLength,18), barrelMat);\n                    barrel.rotation.x = Math.PI/2;\n                    barrel.position.z = barrelLength/2 + 2;\n                    gunPivot.add(barrel);\n                    const inner = new THREE.Mesh(new THREE.CylinderGeometry(0.4,0.4,2,12), new THREE.MeshStandardMaterial({ color:0x050505, metalness:0.3, roughness:0.9 }));\n                    inner.rotation.x = Math.PI/2;\n                    inner.position.z = barrelLength + 2;\n                    gunPivot.add(inner);\n                    gunPivot.rotation.x = -THREE.MathUtils.degToRad(35);\n                } else {\n                    // 防空型：四联机枪塔\n                    const mgGroup = new THREE.Group();\n                    mgGroup.position.set(0, turretY + turretHeight/2 * 0.2, 0);\n                    const mount = new THREE.Mesh(new THREE.CylinderGeometry(2.4,2.6,2.2,16), new THREE.MeshStandardMaterial({ color: baseColor*0.9, metalness:0.4, roughness:0.6 }));\n                    mount.castShadow = true; mgGroup.add(mount);\n                    const gunMat = new THREE.MeshStandardMaterial({ color:0x222222, metalness:0.55, roughness:0.35 });\n                    const tubeGeo = new THREE.CylinderGeometry(0.35,0.35,17,10); // 加长3\n                    const muzzleGeo = new THREE.CylinderGeometry(0.18,0.18,0.9,10);\n                    const offsets = [ [-0.9,0.5], [0.9,0.5], [-0.9,-0.5], [0.9,-0.5] ];\n                    offsets.forEach(([ox,oy])=>{\n                        const tube = new THREE.Mesh(tubeGeo, gunMat);\n                        tube.rotation.x = Math.PI/2;\n                        tube.position.set(ox, oy, 6.5 + 1.5); // 前移以保持后端位置近似不变\n                        tube.castShadow = true;\n                        mgGroup.add(tube);\n                        const muzzle = new THREE.Mesh(muzzleGeo, gunMat);\n                        muzzle.rotation.x = Math.PI/2;\n                        muzzle.position.set(ox, oy, 13.2 + 1.5); // 与机枪加长匹配\n                        mgGroup.add(muzzle);\n                    });\n                    // 轻微仰角\n                    mgGroup.rotation.x = -THREE.MathUtils.degToRad(10);\n                    group.add(mgGroup);\n                    group.userData.aa = true; // 标记防空\n                }\n\n                // === 红色高亮指示箭头（保持） ===\n                const arrowGroup = new THREE.Group();\n                const arrowMat = new THREE.MeshBasicMaterial({ color:0xff2222 });\n                const cone = new THREE.Mesh(new THREE.ConeGeometry(3.2,9,18), arrowMat);\n                cone.rotation.x = Math.PI; // 指向下\n                arrowGroup.add(cone);\n                const stem = new THREE.Mesh(new THREE.CylinderGeometry(0.45,0.45,4.5,12), arrowMat);\n                stem.position.y = -6.5;\n                arrowGroup.add(stem);\n                arrowGroup.position.set(0, turretY + 12, 0);\n                arrowGroup.userData = { pulsePhase: Math.random()*Math.PI*2 };\n                group.add(arrowGroup);\n\n                group.position.set(x,0,z);\n                // 贴合地面高度\n                this.alignTankToGround(group);\n                this.scene.add(group);\n                \n                // Create health bar\n                const healthBar = this.createHealthBar();\n                \n                // Add movement properties for dynamic animation\n                const moveSpeed = 15 + Math.random() * 10; // 15-25 units per second\n                const direction = Math.random() * Math.PI * 2; // Random initial direction\n                const turretSpeed = (Math.random() - 0.5) * 0.3; // -0.15 to +0.15 rad/s\n                \n                // Determine tank type and health\n                const isAA = aaVariant;\n                const maxHealth = isAA ? 4 : 3; // AA tanks are tougher\n                \n                return { \n                    mesh: group, \n                    alive: true, \n                    radius: 16, \n                    indicator: arrowGroup,\n                    // Health system\n                    health: maxHealth,\n                    maxHealth: maxHealth,\n                    healthBar: healthBar,\n                    isAA: isAA,\n                    // Movement properties\n                    velocity: new THREE.Vector3(),\n                    moveDirection: direction,\n                    moveSpeed: moveSpeed,\n                    turretRotation: Math.random() * Math.PI * 2,\n                    turretSpeed: turretSpeed,\n                    changeDirectionTimer: Math.random() * 8, // Random 0-8 seconds\n                    turretReference: turret, // Store reference to turret for rotation\n                    // AA shooting properties\n                    lastShotTime: 0,\n                    shootingRange: 600, // Reduced range for better balance\n                    fireRate: 2.0 + Math.random() * 1.5, // 2.0-3.5 seconds between shots (slower)\n                    accuracy: 0.5 + Math.random() * 0.2 // 50-70% accuracy (less accurate)\n                };\n            }\n\n            // === Tank Movement System (Performance Optimized) ===\n            updateTanks(deltaTime) {\n                if (!this.tanks) return;\n                \n                // Throttle updates - only update tanks every 3rd frame for smoother performance\n                this.tankUpdateCounter = (this.tankUpdateCounter || 0) + 1;\n                const shouldUpdateMovement = this.tankUpdateCounter % 3 === 0;\n                \n                this.tanks.forEach((tank, index) => {\n                    if (!tank.alive) return;\n                    \n                    // Always update turret rotation (lightweight)\n                    if (tank.turretReference) {\n                        tank.turretRotation += tank.turretSpeed * deltaTime;\n                        tank.turretReference.rotation.y = tank.turretRotation;\n                    }\n                    \n                    // Throttle movement updates for performance\n                    if (!shouldUpdateMovement) return;\n                    \n                    // Update direction change timer\n                    tank.changeDirectionTimer -= deltaTime * 3; // Compensate for throttling\n                    if (tank.changeDirectionTimer <= 0) {\n                        const turnAngle = (Math.PI / 2) + (Math.random() * Math.PI / 2);\n                        tank.moveDirection += (Math.random() > 0.5) ? turnAngle : -turnAngle;\n                        tank.changeDirectionTimer = 4 + Math.random() * 6;\n                    }\n                    \n                    // Calculate movement velocity (reuse existing Vector3)\n                    tank.velocity.set(\n                        Math.cos(tank.moveDirection) * tank.moveSpeed,\n                        0,\n                        Math.sin(tank.moveDirection) * tank.moveSpeed\n                    );\n                    \n                    // Apply movement with throttling compensation\n                    const moveMultiplier = deltaTime * 3; // Compensate for 1/3 update frequency\n                    tank.mesh.position.x += tank.velocity.x * moveMultiplier;\n                    tank.mesh.position.z += tank.velocity.z * moveMultiplier;\n                    \n                    // Boundary checking\n                    const worldBoundary = 3500;\n                    const pos = tank.mesh.position;\n                    if (Math.abs(pos.x) > worldBoundary || Math.abs(pos.z) > worldBoundary) {\n                        tank.moveDirection += Math.PI;\n                        tank.changeDirectionTimer = 1 + Math.random() * 2;\n                    }\n                    \n                    // Ground alignment - only every 5th tank per frame to spread load\n                    const frameOffset = this.tankUpdateCounter + index;\n                    if (frameOffset % 15 === 0) { // Every 5 frames for each tank\n                        this.alignTankToGround(tank.mesh);\n                    }\n                    \n                    // Tank body rotation (lightweight)\n                    tank.mesh.rotation.y = tank.moveDirection;\n                    \n                    // AA Tank shooting logic (only for AA tanks)\n                    if (tank.isAA && tank.alive) {\n                        const currentTime = performance.now() / 1000;\n                        const timeSinceLastShot = currentTime - tank.lastShotTime;\n                        \n                        if (timeSinceLastShot > tank.fireRate) {\n                            const distanceToPlayer = tank.mesh.position.distanceTo(this.playerPosition);\n                            \n                            if (distanceToPlayer < tank.shootingRange) {\n                                // Calculate lead target position\n                                const leadPosition = this.calculateLeadTarget(\n                                    tank.mesh.position, \n                                    this.playerPosition, \n                                    this.playerVelocity,\n                                    400, // Bullet speed\n                                    tank.accuracy\n                                );\n                                \n                                // Create enemy bullet\n                                const bulletStartPos = tank.mesh.position.clone();\n                                bulletStartPos.y += 10; // Shoot from turret height\n                                this.createEnemyBullet(bulletStartPos, leadPosition);\n                                \n                                // Create muzzle flash for AA tank\n                                this.createEnemyMuzzleFlash(bulletStartPos);\n                                \n                                tank.lastShotTime = currentTime;\n                                \n                                // Aim turret at target (visual only)\n                                if (tank.turretReference) {\n                                    const aimDirection = new THREE.Vector3()\n                                        .subVectors(leadPosition, tank.mesh.position)\n                                        .normalize();\n                                    tank.turretReference.rotation.y = Math.atan2(aimDirection.x, aimDirection.z);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n\n            // === Warship AI System ===\n            updateWarships(deltaTime) {\n                if (!this.warships) return;\n                \n                const currentTime = performance.now() / 1000;\n                \n                this.warships.forEach((ship, index) => {\n                    if (!ship.alive) return;\n                    \n                    // Warship shooting logic\n                    const timeSinceLastShot = currentTime - ship.lastShotTime;\n                    \n                    if (timeSinceLastShot > ship.fireRate) {\n                        const distanceToPlayer = ship.mesh.position.distanceTo(this.playerPosition);\n                        \n                        if (distanceToPlayer < ship.shootingRange) {\n                            // Calculate lead target position\n                            const leadPosition = this.calculateLeadTarget(\n                                ship.mesh.position,\n                                this.playerPosition,\n                                this.playerVelocity,\n                                350, // Slightly slower bullets than AA tanks\n                                ship.accuracy\n                            );\n                            \n                            // Create enemy bullet from ship\n                            const bulletStartPos = ship.mesh.position.clone();\n                            bulletStartPos.y += 25; // Shoot from ship deck height\n                            this.createEnemyBullet(bulletStartPos, leadPosition, 350);\n                            \n                            // Create muzzle flash for warship\n                            this.createEnemyMuzzleFlash(bulletStartPos);\n                            \n                            ship.lastShotTime = currentTime;\n                        }\n                    }\n                });\n            }\n\n            updateTankIndicators(delta){\n                const t = performance.now()*0.001;\n                // Tanks\n                if(this.tanks){\n                    this.tanks.forEach(tank=>{\n                        if(!tank.alive) { if(tank.indicator) tank.indicator.visible=false; return; }\n                        if(tank.indicator){\n                            tank.indicator.visible = true;\n                            tank.indicator.lookAt(this.camera.position);\n                            const phase = t*4 + (tank.indicator.userData.pulsePhase||0);\n                            const s = 1 + Math.sin(phase)*0.25;\n                            tank.indicator.scale.set(s,s,s);\n                        }\n                    });\n                }\n                // Warships\n                if(this.warships){\n                    this.warships.forEach(ship=>{\n                        if(!ship.alive) { if(ship.indicator) ship.indicator.visible=false; return; }\n                        if(ship.indicator){\n                            ship.indicator.visible = true;\n                            ship.indicator.lookAt(this.camera.position);\n                            const phase = t*4 + (ship.indicator.userData.pulsePhase||0);\n                            const s = 1 + Math.sin(phase)*0.25;\n                            ship.indicator.scale.set(s,s,s);\n                        }\n                    });\n                }\n            }\n\n            createExplosion(position){\n                const group = new THREE.Group();\n                group.position.copy(position);\n                this.scene.add(group);\n                // 静态火花 + 原地燃烧火焰\n                const flameCount = 26;\n                for (let i=0;i<flameCount;i++) {\n                    const size = 0.9 + Math.random()*1.4;\n                    const geo = new THREE.SphereGeometry(size, 6, 6);\n                    const col = 0xffa533;\n                    const mat = new THREE.MeshBasicMaterial({ color: col, transparent:true, opacity:1 });\n                    const p = new THREE.Mesh(geo, mat);\n                    // 静止：dir = 0\n                    p.userData = { dir: new THREE.Vector3(0,0,0), life: 0.65 + Math.random()*0.5, age:0, flame:true };\n                    // 随机分布在爆心轻微半径内\n                    const ang = Math.random()*Math.PI*2; const rad = Math.random()*3.2;\n                    p.position.set(Math.cos(ang)*rad, Math.random()*2, Math.sin(ang)*rad);\n                    group.add(p);\n                }\n                // 轻烟向上（很慢，几乎原地）\n                for (let i=0;i<12;i++) {\n                    const geo = new THREE.SphereGeometry(2+Math.random()*2.5, 8,6);\n                    const mat = new THREE.MeshBasicMaterial({ color: 0x2b2b2b, transparent:true, opacity:0.55 });\n                    const s = new THREE.Mesh(geo, mat);\n                    s.userData = { dir: new THREE.Vector3(0, (0.15+Math.random()*0.25), 0), life: 2.2 + Math.random()*0.8, age:0, smoke:true };\n                    const ang = Math.random()*Math.PI*2; const rad = Math.random()*2.5;\n                    s.position.set(Math.cos(ang)*rad, 0.4+Math.random()*1.2, Math.sin(ang)*rad);\n                    group.add(s);\n                }\n                const animate = () => {\n                    const dt = 0.016;\n                    group.children.forEach(c=>{\n                        if (!c.userData) return;\n                        c.userData.age += dt;\n                        const ratio = c.userData.age / c.userData.life;\n                        // 仅烟缓慢上升\n                        if (c.userData.smoke) c.position.add(c.userData.dir.clone().multiplyScalar(dt));\n                        if (c.material) {\n                            if (c.userData.flame) {\n                                c.material.opacity = Math.max(0, 1 - ratio*1.2);\n                                c.scale.multiplyScalar(1 + dt*0.8);\n                            } else if (c.userData.smoke) {\n                                c.material.opacity = Math.max(0, 0.55 * (1 - ratio));\n                                c.scale.multiplyScalar(1 + dt*0.35);\n                            }\n                        }\n                    });\n                    // 清理\n                    for (let i=group.children.length-1;i>=0;i--) {\n                        const ch = group.children[i];\n                        if (ch.userData && ch.userData.age >= ch.userData.life) {\n                            group.remove(ch); ch.geometry.dispose(); ch.material.dispose();\n                        }\n                    }\n                    if (group.children.length>0) requestAnimationFrame(animate); else this.scene.remove(group);\n                };\n                animate();\n            }\n\n            // ===== Health Bar System =====\n            createHealthBar() {\n                const container = document.createElement('div');\n                container.className = 'health-bar-container';\n                container.style.display = 'none';\n                \n                const bg = document.createElement('div');\n                bg.className = 'health-bar-bg';\n                \n                const fill = document.createElement('div');\n                fill.className = 'health-bar-fill';\n                fill.style.width = '100%';\n                \n                const text = document.createElement('div');\n                text.className = 'health-bar-text';\n                \n                bg.appendChild(fill);\n                container.appendChild(bg);\n                container.appendChild(text);\n                document.body.appendChild(container);\n                \n                return { container, fill, text };\n            }\n\n            updateHealthBar(entity, camera) {\n                if (!entity.health || !entity.healthBar || !entity.alive) return;\n                \n                const { container, fill, text } = entity.healthBar;\n                const worldPos = entity.mesh.position.clone();\n                worldPos.y += 25; // Offset above entity\n                \n                // Convert 3D position to screen coordinates\n                const screenPos = worldPos.clone();\n                screenPos.project(camera);\n                \n                // Check if entity is in view\n                if (screenPos.z > 1 || screenPos.x < -1 || screenPos.x > 1 || screenPos.y < -1 || screenPos.y > 1) {\n                    container.style.display = 'none';\n                    return;\n                }\n                \n                // Convert to pixel coordinates\n                const x = (screenPos.x * 0.5 + 0.5) * window.innerWidth;\n                const y = (screenPos.y * -0.5 + 0.5) * window.innerHeight;\n                \n                // Update position\n                container.style.left = x + 'px';\n                container.style.top = y + 'px';\n                container.style.display = 'block';\n                \n                // Update health percentage\n                const healthPercent = (entity.health / entity.maxHealth) * 100;\n                fill.style.width = healthPercent + '%';\n                \n                // Update color based on health\n                if (healthPercent > 66) {\n                    fill.style.background = 'linear-gradient(90deg, #44ff44, #88ff88)';\n                } else if (healthPercent > 33) {\n                    fill.style.background = 'linear-gradient(90deg, #ffaa00, #ffdd44)';\n                } else {\n                    fill.style.background = 'linear-gradient(90deg, #ff4444, #ff7777)';\n                }\n                \n                // Update text\n                text.textContent = `${entity.health}/${entity.maxHealth}`;\n            }\n\n            updateHealthBars() {\n                // Update health bars for all tanks\n                if (this.tanks && this.tanks.length > 0) {\n                    this.tanks.forEach(tank => {\n                        if (tank.alive && tank.healthBar && tank.health < tank.maxHealth) {\n                            this.updateHealthBar(tank, this.camera);\n                        } else if (tank.healthBar) {\n                            // Hide health bar if tank is at full health\n                            tank.healthBar.container.style.display = 'none';\n                        }\n                    });\n                }\n                \n                // Update health bars for all warships\n                if (this.warships && this.warships.length > 0) {\n                    this.warships.forEach(ship => {\n                        if (ship.alive && ship.healthBar && ship.health < ship.maxHealth) {\n                            this.updateHealthBar(ship, this.camera);\n                        } else if (ship.healthBar) {\n                            // Hide health bar if ship is at full health\n                            ship.healthBar.container.style.display = 'none';\n                        }\n                    });\n                }\n            }\n\n            createScorchMark(x,z){\n                const r = 18 + Math.random()*6;\n                const geo = new THREE.CircleGeometry(r, 20);\n                const mat = new THREE.MeshBasicMaterial({ color: 0x1d1b1a, transparent:true, opacity:0.55, side:THREE.DoubleSide });\n                const m = new THREE.Mesh(geo, mat);\n                m.rotation.x = -Math.PI/2;\n                m.position.set(x, -49.8, z);\n                this.scene.add(m);\n                // 渐隐\n                const start = performance.now();\n                const fade = () => {\n                    const t = (performance.now()-start)/8000;\n                    if (t<1) {\n                        mat.opacity = 0.55*(1-t);\n                        requestAnimationFrame(fade);\n                    } else {\n                        this.scene.remove(m); geo.dispose(); mat.dispose();\n                    }\n                };\n                requestAnimationFrame(fade);\n            }\n\n            // ================= Simple One-time Tank Destruction System =================\n            createTankDestroyed(position, tankMesh) {\n                try {\n                    // 安全检查\n                    if (!position || !tankMesh) {\n                        console.warn('Invalid tank destruction parameters');\n                        return;\n                    }\n                    \n                    // 立即停止坦克移动 - 无需复杂检查\n                    // updateTanks中的alive检查会自动处理\n                    \n                    // 转换外观\n                    this.convertTankToWreck(tankMesh);\n                    \n                    // 创建简单烟雾\n                    this.createExplosionSmoke(position);\n                    \n                } catch (e) {\n                    console.error('Tank destruction error:', e);\n                }\n            }\n\n            convertTankToWreck(tankMesh) {\n                try {\n                    // 安全的材质转换\n                    tankMesh.traverse((child) => {\n                        if (child.isMesh && child.material) {\n                            // 简单的材质替换，避免复杂操作\n                            const newMat = new THREE.MeshStandardMaterial({\n                                color: 0x2a2422, // 深色烧毁外观\n                                metalness: 0.1,\n                                roughness: 0.9\n                            });\n                            \n                            child.material = newMat;\n                        }\n                        \n                        // 安全的炮管下垂检查\n                        if (child.name === 'gunPivot') {\n                            child.rotation.x = -Math.PI / 6; // 下垂30度\n                        }\n                    });\n                    \n                    // 轻微倾斜效果\n                    tankMesh.rotation.z += (Math.random() - 0.5) * 0.1;\n                    tankMesh.rotation.x += (Math.random() - 0.5) * 0.08;\n                    \n                } catch (e) {\n                    console.warn('Tank wreck conversion error:', e);\n                }\n            }\n\n            createExplosionSmoke(position) {\n                // 极简版一次性烟雾效果，绝不卡死\n                const smokeGroup = new THREE.Group();\n                \n                // 只创建2个简单的烟雾球体，降低复杂度\n                for (let i = 0; i < 2; i++) {\n                    const smokeGeo = new THREE.SphereGeometry(1.2, 4, 3); // 极低面数\n                    const smokeMat = new THREE.MeshBasicMaterial({\n                        color: 0x333333,\n                        transparent: true,\n                        opacity: 0.6\n                    });\n                    \n                    const smoke = new THREE.Mesh(smokeGeo, smokeMat);\n                    smoke.position.set(\n                        position.x + (Math.random() - 0.5) * 3,\n                        position.y + 1 + i,\n                        position.z + (Math.random() - 0.5) * 3\n                    );\n                    smoke.scale.setScalar(0.4);\n                    \n                    smokeGroup.add(smoke);\n                }\n                \n                this.scene.add(smokeGroup);\n                \n                // 最简单的消失逻辑 - 2秒后直接删除，没有动画循环\n                setTimeout(() => {\n                    try {\n                        this.scene.remove(smokeGroup);\n                        // 安全清理\n                        smokeGroup.children.forEach(child => {\n                            if (child.geometry) child.geometry.dispose();\n                            if (child.material) child.material.dispose();\n                        });\n                        smokeGroup.clear();\n                    } catch (e) {\n                        console.warn('Smoke cleanup error:', e);\n                    }\n                }, 2000);\n            }\n\n            // （公路系统已移除）\n\n            createBuildings() {\n                // 创建城镇区域\n                this.createTownArea(-800, -800, 600, 600); // 主城区\n                this.createTownArea(1200, 800, 400, 400);  // 小镇1\n                this.createTownArea(-1500, 1000, 300, 300); // 小镇2\n                \n                // 创建一些独立建筑\n                for (let i = 0; i < 50; i++) {\n                    const x = (Math.random() - 0.5) * 6000;\n                    const z = (Math.random() - 0.5) * 6000;\n                    this.createRandomBuilding(x, z);\n                }\n            }\n\n            createTownArea(centerX, centerZ, width, depth) {\n                const buildingsPerRow = 6;\n                const spacing = Math.min(width, depth) / buildingsPerRow;\n                \n                for (let i = 0; i < buildingsPerRow; i++) {\n                    for (let j = 0; j < buildingsPerRow; j++) {\n                        const x = centerX + (i - buildingsPerRow/2) * spacing + (Math.random() - 0.5) * 20;\n                        const z = centerZ + (j - buildingsPerRow/2) * spacing + (Math.random() - 0.5) * 20;\n                        this.createRandomBuilding(x, z, true); // 城镇建筑更大\n                    }\n                }\n            }\n\n            createRandomBuilding(x, z, isTown = false) {\n                const buildingGroup = new THREE.Group();\n                \n                // 建筑尺寸\n                const width = isTown ? 20 + Math.random() * 30 : 10 + Math.random() * 15;\n                const depth = isTown ? 20 + Math.random() * 30 : 10 + Math.random() * 15;\n                const height = isTown ? 30 + Math.random() * 80 : 15 + Math.random() * 25;\n                \n                // 主建筑\n                const buildingGeometry = new THREE.BoxGeometry(width, height, depth);\n                const buildingColors = [0x8B7355, 0xA0522D, 0x696969, 0x778899, 0xDC143C]; // 各种建筑颜色\n                const buildingMaterial = new THREE.MeshLambertMaterial({ \n                    color: buildingColors[Math.floor(Math.random() * buildingColors.length)]\n                });\n                \n                const building = new THREE.Mesh(buildingGeometry, buildingMaterial);\n                building.position.y = height / 2 - 50;\n                building.castShadow = true;\n                building.receiveShadow = true;\n                buildingGroup.add(building);\n                \n                // 屋顶\n                const roofGeometry = new THREE.ConeGeometry(\n                    Math.max(width, depth) * 0.7, \n                    height * 0.3, \n                    4\n                );\n                const roofMaterial = new THREE.MeshLambertMaterial({ \n                    color: 0x8B0000 // 红色屋顶\n                });\n                const roof = new THREE.Mesh(roofGeometry, roofMaterial);\n                roof.position.y = height - 50 + height * 0.15;\n                roof.rotation.y = Math.PI / 4;\n                roof.castShadow = true;\n                buildingGroup.add(roof);\n                \n                // 随机添加窗户（简单的黄色方块）\n                if (isTown) {\n                    for (let i = 0; i < 8; i++) {\n                        const windowGeometry = new THREE.PlaneGeometry(3, 4);\n                        const windowMaterial = new THREE.MeshLambertMaterial({ \n                            color: 0xFFFF00, // 黄色窗户（灯光）\n                            transparent: true,\n                            opacity: 0.8\n                        });\n                        const window = new THREE.Mesh(windowGeometry, windowMaterial);\n                        window.position.set(\n                            (Math.random() - 0.5) * width * 0.8,\n                            (Math.random() - 0.3) * height - 50,\n                            width / 2 + 0.1\n                        );\n                        buildingGroup.add(window);\n                    }\n                }\n                \n                buildingGroup.position.set(x, 0, z);\n                this.scene.add(buildingGroup);\n            }\n\n            showAnimationControls() {\n                if (!this.modelAnimations || this.modelAnimations.length === 0) return;\n                \n                // 创建动画控制面板\n                const controlPanel = document.createElement('div');\n                controlPanel.id = 'animationControls';\n                controlPanel.style.cssText = `\n                    position: fixed;\n                    top: 120px;\n                    right: 20px;\n                    background: rgba(0, 0, 0, 0.8);\n                    color: white;\n                    padding: 15px;\n                    border-radius: 10px;\n                    font-family: monospace;\n                    z-index: 1000;\n                    max-width: 250px;\n                `;\n                \n                controlPanel.innerHTML = `\n                    <h4 style=\"margin: 0 0 10px 0; color: #00ff00;\">✈️ Animation Controls</h4>\n                    <div id=\"animationList\"></div>\n                    <button id=\"playAllAnimations\" style=\"margin-top: 10px; width: 100%;\">▶️ Play All</button>\n                    <button id=\"stopAllAnimations\" style=\"margin-top: 5px; width: 100%;\">⏹️ Stop All</button>\n                `;\n                \n                const animationList = controlPanel.querySelector('#animationList');\n                \n                // 为每个动画创建控制按钮\n                this.modelAnimations.forEach((clip, index) => {\n                    const animDiv = document.createElement('div');\n                    animDiv.style.cssText = 'margin: 5px 0; padding: 5px; background: rgba(255,255,255,0.1); border-radius: 5px;';\n                    \n                    animDiv.innerHTML = `\n                        <div style=\"font-size: 12px; color: #00ffff;\">${clip.name || `Animation ${index + 1}`}</div>\n                        <div style=\"font-size: 10px; color: #888;\">Duration: ${clip.duration.toFixed(1)}s</div>\n                        <button class=\"playAnim\" data-index=\"${index}\" style=\"font-size: 10px; margin-top: 3px;\">▶️ Play</button>\n                        <button class=\"pauseAnim\" data-index=\"${index}\" style=\"font-size: 10px; margin-left: 5px;\">⏸️ Pause</button>\n                    `;\n                    \n                    animationList.appendChild(animDiv);\n                });\n                \n                // 添加事件监听器\n                controlPanel.querySelector('#playAllAnimations').addEventListener('click', () => {\n                    this.activeAnimations.forEach(action => action.play());\n                });\n                \n                controlPanel.querySelector('#stopAllAnimations').addEventListener('click', () => {\n                    this.activeAnimations.forEach(action => action.stop());\n                });\n                \n                // 单个动画控制\n                controlPanel.querySelectorAll('.playAnim').forEach(btn => {\n                    btn.addEventListener('click', (e) => {\n                        const index = parseInt(e.target.dataset.index);\n                        if (this.activeAnimations[index]) {\n                            this.activeAnimations[index].play();\n                        }\n                    });\n                });\n                \n                controlPanel.querySelectorAll('.pauseAnim').forEach(btn => {\n                    btn.addEventListener('click', (e) => {\n                        const index = parseInt(e.target.dataset.index);\n                        if (this.activeAnimations[index]) {\n                            this.activeAnimations[index].paused = !this.activeAnimations[index].paused;\n                        }\n                    });\n                });\n                \n                document.body.appendChild(controlPanel);\n                \n                // 3秒后自动淡化控制面板\n                setTimeout(() => {\n                    if (controlPanel.parentNode) {\n                        controlPanel.style.opacity = '0.3';\n                    }\n                }, 3000);\n            }\n\n            setupFileUpload() {\n                const fileInput = document.getElementById('fileInput');\n                const uploadArea = document.getElementById('glbUpload');\n                \n                // File input change\n                fileInput.addEventListener('change', (event) => {\n                    const file = event.target.files[0];\n                    if (file) {\n                        this.loadGLBModel(file);\n                    }\n                });\n                \n                // Drag and drop\n                uploadArea.addEventListener('dragover', (e) => {\n                    e.preventDefault();\n                    uploadArea.style.borderColor = '#4CAF50';\n                    uploadArea.style.backgroundColor = 'rgba(76, 175, 80, 0.1)';\n                });\n                \n                uploadArea.addEventListener('dragleave', (e) => {\n                    e.preventDefault();\n                    uploadArea.style.borderColor = '';\n                    uploadArea.style.backgroundColor = '';\n                });\n                \n                uploadArea.addEventListener('drop', (e) => {\n                    e.preventDefault();\n                    uploadArea.style.borderColor = '';\n                    uploadArea.style.backgroundColor = '';\n                    \n                    const files = e.dataTransfer.files;\n                    if (files.length > 0) {\n                        const file = files[0];\n                        if (file.name.toLowerCase().endsWith('.glb') || file.name.toLowerCase().endsWith('.gltf')) {\n                            this.loadGLBModel(file);\n                        } else {\n                            this.showNotification('Please drop a GLB or GLTF file', 'error');\n                        }\n                    }\n                });\n            }\n\n            loadGLBModel(file) {\n                this.showNotification('Loading aircraft model...', 'success');\n                \n                const loader = new GLTFLoader();\n                const url = URL.createObjectURL(file);\n                \n                loader.load(url, (gltf) => {\n                    // Remove existing aircraft if loaded model exists\n                    if (this.loadedModel) {\n                        this.scene.remove(this.loadedModel);\n                        // 清理旧的动画混合器\n                        if (this.modelAnimationMixer) {\n                            this.modelAnimationMixer.stopAllAction();\n                            this.modelAnimationMixer = null;\n                        }\n                    } else if (this.aircraft) {\n                        this.scene.remove(this.aircraft);\n                    }\n                    \n                    const model = gltf.scene;\n                    \n                    // === 动画系统设置 ===\n                    this.modelAnimations = gltf.animations; // 存储动画数据\n                    this.modelAnimationMixer = null;\n                    this.activeAnimations = []; // 存储当前播放的动画\n                    \n                    // 如果模型包含动画，创建动画混合器\n                    if (gltf.animations && gltf.animations.length > 0) {\n                        this.modelAnimationMixer = new THREE.AnimationMixer(model);\n                        \n                        console.log(`Found ${gltf.animations.length} animations:`, gltf.animations.map(anim => anim.name));\n                        \n                        // 自动播放所有动画（通常用于螺旋桨、引擎等循环动画）\n                        gltf.animations.forEach((clip, index) => {\n                            const action = this.modelAnimationMixer.clipAction(clip);\n                            action.setLoop(THREE.LoopRepeat);\n                            action.clampWhenFinished = false;\n                            \n                            // 自动识别动画类型\n                            const animName = clip.name.toLowerCase();\n                            if (animName.includes('propeller') || \n                                animName.includes('rotor') || \n                                animName.includes('engine') ||\n                                animName.includes('fan') ||\n                                animName.includes('spin')) {\n                                // 快速循环动画（螺旋桨等）\n                                action.timeScale = 2.0; // 2倍速度\n                                action.play();\n                                this.activeAnimations.push(action);\n                                console.log(`Auto-playing fast animation: ${clip.name}`);\n                            } else if (animName.includes('idle') || \n                                      animName.includes('loop') ||\n                                      clip.duration > 10) {\n                                // 慢速循环动画\n                                action.timeScale = 1.0;\n                                action.play();\n                                this.activeAnimations.push(action);\n                                console.log(`Auto-playing slow animation: ${clip.name}`);\n                            } else {\n                                // 其他动画默认也播放\n                                action.timeScale = 1.0;\n                                action.play();\n                                this.activeAnimations.push(action);\n                                console.log(`Auto-playing animation: ${clip.name}`);\n                            }\n                        });\n                        \n                        this.showNotification(`Aircraft loaded with ${gltf.animations.length} animations!`, 'success');\n                    } else {\n                        this.showNotification('Aircraft loaded (no animations found)', 'success');\n                    }\n                    \n                    // Calculate model bounding box to determine appropriate scale\n                    const box = new THREE.Box3().setFromObject(model);\n                    const size = box.getSize(new THREE.Vector3());\n                    \n                    // Target size should be similar to default aircraft (wingspan ~18, length ~14)\n                    const targetSize = 18; // Target wingspan/length\n                    const currentMaxSize = Math.max(size.x, size.y, size.z);\n                    const scaleRatio = targetSize / currentMaxSize;\n                    \n                    // Apply calculated scale (minimum 15x for very small models) and additional 1.5x multiplier\n                    const finalScale = Math.max(scaleRatio, 15) * 1.5;\n                    model.scale.set(finalScale, finalScale, finalScale);\n                    \n                    // Enhance materials for better lighting\n                    model.traverse((child) => {\n                        if (child.isMesh) {\n                            child.castShadow = true;\n                            child.receiveShadow = true;\n                            \n                            if (child.material) {\n                                if (Array.isArray(child.material)) {\n                                    child.material.forEach(mat => {\n                                        this.enhanceMaterial(mat);\n                                    });\n                                } else {\n                                    this.enhanceMaterial(child.material);\n                                }\n                            }\n                        }\n                    });\n                    \n                    model.position.copy(this.playerPosition);\n                    this.loadedModel = model;\n                    this.aircraft = model;\n                    this.scene.add(model);\n                    \n                    // Recreate nose cannons with transparency for custom model\n                    this.createNoseCannons();\n                    \n                    // 显示动画控制面板（如果有动画）\n                    if (gltf.animations && gltf.animations.length > 0) {\n                        // 移除旧的控制面板\n                        const oldPanel = document.getElementById('animationControls');\n                        if (oldPanel) oldPanel.remove();\n                        \n                        // 显示新的动画控制面板\n                        setTimeout(() => this.showAnimationControls(), 500);\n                    }\n                    \n                    URL.revokeObjectURL(url);\n                    \n                }, undefined, (error) => {\n                    console.error('Error loading GLB model:', error);\n                    this.showNotification('Failed to load aircraft model', 'error');\n                    URL.revokeObjectURL(url);\n                });\n            }\n\n            enhanceMaterial(material) {\n                // === 轻微增亮过暗材质 ===\n                if (material.color && material.color.r + material.color.g + material.color.b < 0.3) {\n                    material.color.multiplyScalar(1.5); // 降低到1.5倍，避免过曝\n                }\n                \n                // === 适度优化PBR材质属性 ===\n                if (material.metalness !== undefined) {\n                    material.metalness = Math.min(material.metalness + 0.2, 0.6); // 适度增加金属度\n                }\n                if (material.roughness !== undefined) {\n                    material.roughness = Math.max(material.roughness - 0.1, 0.4); // 适度降低粗糙度\n                }\n                \n                // === 移除自发光效果 ===\n                // 不添加自发光，使用自然光照\n                \n                // === 适度环境光响应 ===\n                if (material.envMapIntensity !== undefined) {\n                    material.envMapIntensity = 1.0; // 降低到1.0，自然反射\n                }\n                \n                // === 确保材质响应光照 ===\n                material.needsUpdate = true;\n                \n                // === 适度提升极暗材质 ===\n                if (material.color && material.color.getHSL({}).l < 0.15) {\n                    // 仅对极暗材质进行轻微调整\n                    const hsl = material.color.getHSL({});\n                    material.color.setHSL(hsl.h, hsl.s, Math.max(hsl.l, 0.2)); // 最低20%亮度\n                }\n            }\n\n            setupKeyboardControls() {\n                document.addEventListener('keydown', (event) => {\n                    this.inputState.keys.add(event.code);\n                    \n                    // Camera view switching with C key\n                    if (event.code === 'KeyC') {\n                        this.switchCameraView();\n                    }\n                });\n                \n                document.addEventListener('keyup', (event) => {\n                    this.inputState.keys.delete(event.code);\n                });\n            }\n            \n            switchCameraView() {\n                this.currentViewIndex = (this.currentViewIndex + 1) % this.viewModes.length;\n                const currentView = this.viewModes[this.currentViewIndex];\n                \n                // Show view change notification\n                this.showViewChangeNotification(currentView.name);\n            }\n            \n            showViewChangeNotification(viewName) {\n                // Remove existing notification\n                const existingNotification = document.getElementById('viewChangeNotification');\n                if (existingNotification) {\n                    existingNotification.remove();\n                }\n                \n                // Create new notification\n                const notification = document.createElement('div');\n                notification.id = 'viewChangeNotification';\n                notification.style.cssText = `\n                    position: fixed; top: 120px; right: 20px; z-index: 1500;\n                    background: rgba(0, 0, 0, 0.8); backdrop-filter: blur(6px);\n                    color: white; padding: 8px 16px; border-radius: 6px;\n                    font-family: 'Segoe UI', sans-serif; font-size: 14px; font-weight: 600;\n                    border: 1px solid rgba(255, 255, 255, 0.2);\n                    animation: slideInFade 0.3s ease-out;\n                `;\n                notification.textContent = `📷 ${viewName}`;\n                document.body.appendChild(notification);\n                \n                // Auto remove after 2 seconds\n                setTimeout(() => {\n                    notification.style.opacity = '0';\n                    setTimeout(() => notification.remove(), 300);\n                }, 2000);\n            }\n\n            updateInputFromKeyboard(deltaTime) {\n                const keys = this.inputState.keys;\n                const turnSpeed = 1.5; // radians per second\n                const pitchSpeed = 1.0; // radians per second  \n                const speedChangeRate = 0.8; // speed change per second\n\n                // Yaw controls (left/right turns)\n                if (keys.has('KeyA') || keys.has('ArrowLeft')) {\n                    this.inputState.yaw += turnSpeed * deltaTime;\n                }\n                if (keys.has('KeyD') || keys.has('ArrowRight')) {\n                    this.inputState.yaw -= turnSpeed * deltaTime;\n                }\n\n                // Pitch controls (nose up/down)\n                if (keys.has('KeyW') || keys.has('ArrowUp')) {\n                    this.inputState.pitch = Math.min(this.inputState.pitch + pitchSpeed * deltaTime, Math.PI / 4);\n                }\n                if (keys.has('KeyS') || keys.has('ArrowDown')) {\n                    this.inputState.pitch = Math.max(this.inputState.pitch - pitchSpeed * deltaTime, -Math.PI / 4);\n                }\n\n                // Roll controls (banking) - 允许360度翻转\n                if (keys.has('KeyQ')) {\n                    this.inputState.roll -= turnSpeed * deltaTime; // 移除限制，允许无限翻转\n                } else if (keys.has('KeyE')) {\n                    this.inputState.roll += turnSpeed * deltaTime; // 移除限制，允许无限翻转\n                } else {\n                    // Auto-level roll - 仅在接近水平时自动调平\n                    const levelingSpeed = 2.0;\n                    // 计算到最近的水平位置的距离\n                    const normalizedRoll = ((this.inputState.roll % (Math.PI * 2)) + Math.PI * 2) % (Math.PI * 2);\n                    let targetRoll = 0;\n                    if (normalizedRoll > Math.PI) {\n                        targetRoll = Math.PI * 2;\n                    }\n                    const rollDiff = Math.abs(normalizedRoll - targetRoll);\n                    \n                    // 只有在接近水平位置时才自动调平\n                    if (rollDiff < Math.PI / 6) { // 30度范围内\n                        if (Math.abs(this.inputState.roll) > 0.01) {\n                            this.inputState.roll = THREE.MathUtils.lerp(this.inputState.roll, Math.round(this.inputState.roll / (Math.PI * 2)) * Math.PI * 2, deltaTime * levelingSpeed);\n                        } else {\n                            this.inputState.roll = Math.round(this.inputState.roll / (Math.PI * 2)) * Math.PI * 2;\n                        }\n                    }\n                }\n\n                // Speed controls\n                if (keys.has('ShiftLeft') || keys.has('ShiftRight') || keys.has('Space')) {\n                    this.inputState.speed = Math.min(this.inputState.speed + speedChangeRate * deltaTime, 1.0);\n                }\n                if (keys.has('ControlLeft') || keys.has('ControlRight') || keys.has('KeyX')) {\n                    this.inputState.speed = Math.max(this.inputState.speed - speedChangeRate * deltaTime, 0.2);\n                }\n\n                // Auto-level pitch when no input\n                if (!keys.has('KeyW') && !keys.has('KeyS') && \n                    !keys.has('ArrowUp') && !keys.has('ArrowDown')) {\n                    const levelingSpeed = 2.0;\n                    if (Math.abs(this.inputState.pitch) > 0.01) {\n                        this.inputState.pitch = THREE.MathUtils.lerp(this.inputState.pitch, 0, deltaTime * levelingSpeed);\n                    } else {\n                        this.inputState.pitch = 0;\n                    }\n                }\n\n                // Weather toggle\n                if (keys.has('KeyR')) {\n                    if (!this.rKeyPressed) {\n                        this.toggleWeather();\n                        this.rKeyPressed = true;\n                    }\n                } else {\n                    this.rKeyPressed = false;\n                }\n            }\n\n            updatePlayer(deltaTime) {\n                if (!this.aircraft) return;\n\n                // Update input from keyboard\n                this.updateInputFromKeyboard(deltaTime);\n\n                // Update speed based on input\n                const maxSpeed = 120; // Maximum speed\n                const targetSpeed = Math.max(this.inputState.speed * maxSpeed, 30); // Minimum 30 for flight\n                this.playerSpeed = THREE.MathUtils.lerp(this.playerSpeed, targetSpeed, deltaTime * 2);\n\n                // Calculate forward direction based on pitch and yaw\n                const forward = new THREE.Vector3(0, 0, 1); // +Z is forward for our aircraft\n                const rotation = new THREE.Euler(this.inputState.pitch, this.inputState.yaw, this.inputState.roll);\n                forward.applyEuler(rotation);\n\n                // Apply constant thrust in forward direction (this ensures the plane always moves forward)\n                const thrust = forward.clone().multiplyScalar(this.playerSpeed);\n                this.playerVelocity.copy(thrust); // Set velocity directly to thrust direction and speed\n\n                // Apply lift when flying forward (simple aerodynamics)\n                if (this.playerSpeed > 40) {\n                    const liftStrength = Math.min(this.playerSpeed / 80, 1.0);\n                    const liftDirection = new THREE.Vector3(0, 1, 0); // Upward\n                    const lift = liftDirection.multiplyScalar(liftStrength * 25 * deltaTime);\n                    this.playerVelocity.add(lift);\n                }\n\n                // Apply gravity\n                const gravity = new THREE.Vector3(0, -30, 0);\n                this.playerVelocity.add(gravity.multiplyScalar(deltaTime));\n\n                // Light air resistance (much reduced)\n                this.playerVelocity.multiplyScalar(1 - 0.1 * deltaTime);\n\n                // Update position\n                this.playerPosition.add(this.playerVelocity.clone().multiplyScalar(deltaTime));\n\n                // === INFINITE LOOPING WORLD SYSTEM ===\n                const worldBoundary = 4000; // 8000x8000地形的边界（从中心到边缘4000单位）\n                let worldWrapped = false;\n                \n                // X轴边界检查\n                if (this.playerPosition.x > worldBoundary) {\n                    this.playerPosition.x = -worldBoundary + 1;\n                    worldWrapped = true;\n                } else if (this.playerPosition.x < -worldBoundary) {\n                    this.playerPosition.x = worldBoundary - 1;\n                    worldWrapped = true;\n                }\n                \n                // Z轴边界检查\n                if (this.playerPosition.z > worldBoundary) {\n                    this.playerPosition.z = -worldBoundary + 1;\n                    worldWrapped = true;\n                } else if (this.playerPosition.z < -worldBoundary) {\n                    this.playerPosition.z = worldBoundary - 1;\n                    worldWrapped = true;\n                }\n                \n                // 显示循环世界提示消息\n                if (worldWrapped) {\n                    this.showWrapMessage();\n                }\n\n                // Keep aircraft above ground\n                if (this.playerPosition.y < 10) {\n                    this.playerPosition.y = 10;\n                    this.playerVelocity.y = Math.max(this.playerVelocity.y, 0);\n                    this.playerVelocity.multiplyScalar(0.7); // Bounce damping\n                }\n\n                // Update aircraft position and rotation\n                this.aircraft.position.copy(this.playerPosition);\n                \n                // Set aircraft rotation based on flight controls\n                this.aircraft.rotation.set(\n                    this.inputState.pitch,\n                    this.inputState.yaw, \n                    this.inputState.roll\n                );\n\n                // === 移除动态光照跟踪，使用自然光照 ===\n                // 不再需要专用光源跟随飞机\n\n                // Update propeller animation\n                this.updatePropeller(deltaTime);\n                // bird flocks removed\n            }\n\n            updateCamera() {\n                if (!this.aircraft) return;\n                \n                // Get current view mode\n                const currentView = this.viewModes[this.currentViewIndex];\n                \n                // Calculate aircraft rotation matrix\n                const aircraftRotation = new THREE.Euler(this.inputState.pitch, this.inputState.yaw, this.inputState.roll);\n                const rotationMatrix = new THREE.Matrix4().makeRotationFromEuler(aircraftRotation);\n                \n                // Apply aircraft rotation to the camera offset (for chase view)\n                let cameraOffset;\n                if (this.currentViewIndex === 0) {\n                    // Chase view - camera follows aircraft orientation\n                    cameraOffset = currentView.offset.clone().applyMatrix4(rotationMatrix);\n                } else {\n                    // Fixed side/top views - don't rotate with aircraft\n                    cameraOffset = currentView.offset.clone();\n                }\n                \n                // Calculate target camera position\n                const targetPosition = this.playerPosition.clone().add(cameraOffset);\n                \n                // Smooth camera movement\n                this.camera.position.lerp(targetPosition, 0.1);\n                \n                // Camera look target\n                let lookTarget;\n                if (this.currentViewIndex === 3) {\n                    // Tactical view - look slightly ahead of aircraft\n                    const forward = new THREE.Vector3(0, 0, 1).applyMatrix4(rotationMatrix);\n                    lookTarget = this.playerPosition.clone().add(forward.multiplyScalar(30));\n                } else {\n                    // All other views look at aircraft center\n                    lookTarget = this.playerPosition.clone();\n                }\n                \n                this.camera.lookAt(lookTarget);\n            }\n\n            updateClouds(deltaTime) {\n                // Slowly move clouds\n                this.clouds.forEach(cloud => {\n                    cloud.position.x += Math.sin(Date.now() * 0.0001) * 0.1;\n                    cloud.rotation.y += deltaTime * 0.1;\n                });\n            }\n\n            hideLoadingScreen() {\n                const loadingScreen = document.getElementById('loadingScreen');\n                const progressFill = document.getElementById('progressFill');\n                \n                // Simulate loading progress\n                let progress = 0;\n                const progressInterval = setInterval(() => {\n                    progress += Math.random() * 20;\n                    if (progress >= 100) {\n                        progress = 100;\n                        progressFill.style.width = '100%';\n                        \n                        setTimeout(() => {\n                            loadingScreen.style.opacity = '0';\n                            loadingScreen.style.transition = 'opacity 1s ease';\n                            setTimeout(() => {\n                                loadingScreen.style.display = 'none';\n                            }, 1000);\n                        }, 500);\n                        \n                        clearInterval(progressInterval);\n                    }\n                    progressFill.style.width = progress + '%';\n                }, 100);\n            }\n\n            showNotification(message, type = 'success') {\n                const notification = document.getElementById('notification');\n                notification.textContent = message;\n                notification.className = `notification-${type}`;\n                notification.style.display = 'block';\n                \n                setTimeout(() => {\n                    notification.style.display = 'none';\n                }, 3000);\n            }\n\n            // === Scene Switcher UI (dynamic English) ===\n            setupSceneSwitcher(){\n                // Remove any legacy static panel (Chinese) if still present\n                const existing = document.getElementById('sceneSwitcher');\n                if (existing && !existing.__dynamic) existing.remove();\n                if (document.getElementById('sceneSwitcher')) return; // already created\n                const panel = document.createElement('div');\n                panel.id = 'sceneSwitcher';\n                panel.__dynamic = true;\n                const scenes = [\n                    { key:'grassland', label:'Grassland' },\n                    { key:'snow', label:'Snow' },\n                    { key:'desert', label:'Desert' },\n                    { key:'ocean', label:'Ocean' }\n                ];\n                scenes.forEach(s => {\n                    const btn = document.createElement('button');\n                    btn.textContent = s.label;\n                    btn.dataset.scene = s.key;\n                    if (this.sceneType === s.key || (this.sceneType === 'default' && s.key==='grassland')) btn.classList.add('active');\n                    btn.addEventListener('click', ()=>{\n                        if (this.sceneType === s.key) return;\n                        this.switchSceneType(s.key);\n                    });\n                    panel.appendChild(btn);\n                });\n                document.body.appendChild(panel);\n                if (!window.__SCENE_SWITCHER_VERSION_LOGGED) {\n                    window.__SCENE_SWITCHER_VERSION_LOGGED = true;\n                    console.log('[SceneSwitcher] v1 loaded', new Date().toISOString());\n                }\n            }\n\n            updateSceneSwitcherActive(){\n                const panel = document.getElementById('sceneSwitcher');\n                if (!panel) return;\n                panel.querySelectorAll('button').forEach(btn => {\n                    if (btn.dataset.scene === this.sceneType) btn.classList.add('active');\n                    else btn.classList.remove('active');\n                });\n            }\n\n            // Dynamic scene switching (no full page reload)\n            switchSceneType(newType){\n                if (newType === 'default') newType = 'grassland'; // normalize\n                const valid = ['grassland','snow','desert','ocean'];\n                if (!valid.includes(newType)) return;\n                if (this.sceneType === newType) return;\n                const prevScene = this.scene;\n                const aircraft = this.aircraft;\n                const playerPos = this.playerPosition.clone();\n                const playerVel = this.playerVelocity.clone();\n                this.sceneType = newType;\n                // Update URL hash (omit hash for grassland for cleanliness)\n                if (newType === 'grassland') history.replaceState(null,'', window.location.pathname + window.location.search);\n                else history.replaceState(null,'', '#'+newType);\n                this.disposeOldScene(prevScene, aircraft);\n                const fogColors = { grassland:0x87CEEB, snow:0xdbe9f5, desert:0xe2c27b, ocean:0x6fb2ff };\n                this.scene = new THREE.Scene();\n                const fogColor = fogColors[this.sceneType] || fogColors.grassland;\n                this.scene.fog = new THREE.Fog(fogColor, 100, 2000);\n                this.renderer.setClearColor(fogColor,1);\n                if (aircraft) {\n                    this.aircraft = aircraft;\n                    this.aircraft.position.copy(playerPos);\n                    this.scene.add(this.aircraft);\n                }\n                this.tanks = []; this.bullets = []; this.muzzleFlashes = []; this.warships = [];\n                this.gunBarrels = [];\n                this.setupLighting();\n                this.environmentConfig = this.getEnvironmentConfig(this.sceneType);\n                this.createTerrain();\n                if (this.sceneType !== 'ocean') this.createClouds();\n                this.createNoseCannons();\n                if (this.isFiring) this.lastShotTime = 0;\n                this.playerPosition.copy(playerPos);\n                this.playerVelocity.copy(playerVel);\n                this.updateSceneSwitcherActive();\n                this.showNotification('Switched to scene: '+ this.sceneType.charAt(0).toUpperCase()+this.sceneType.slice(1), 'success');\n            }\n\n            disposeOldScene(oldScene, aircraftKeep){\n                if (!oldScene) return;\n                oldScene.traverse(obj=>{\n                    if (aircraftKeep && (obj===aircraftKeep || aircraftKeep.children.includes(obj))) return;\n                    if (obj.isMesh) {\n                        if (obj.geometry) obj.geometry.dispose();\n                        if (Array.isArray(obj.material)) obj.material.forEach(m=>m && m.dispose && m.dispose());\n                        else if (obj.material) obj.material.dispose();\n                    }\n                });\n            }\n\n            gameLoop() {\n                const deltaTime = 0.016; // Approximately 60 FPS\n                \n                this.updatePlayer(deltaTime);\n                this.updateCamera();\n                this.updateClouds(deltaTime);\n                this.updatePropeller(deltaTime);\n                // Tank movement and turret rotation\n                this.updateTanks(deltaTime);\n                // Warship AI and shooting\n                this.updateWarships(deltaTime);\n                // Weapon updates\n                this.tryFireGuns(deltaTime);\n                this.updateBullets(deltaTime);\n                this.updateEnemyBullets(deltaTime);\n                this.updateTankIndicators(deltaTime);\n                \n                // Update health bars for tanks and warships (throttled for performance)\n                this.healthBarUpdateCounter = (this.healthBarUpdateCounter || 0) + 1;\n                if (this.healthBarUpdateCounter % 3 === 0) {\n                    this.updateHealthBars();\n                }\n                \n                // Update player health display (throttled)\n                if (this.healthBarUpdateCounter % 10 === 0) {\n                    this.updatePlayerHealthDisplay();\n                }\n                \n                // === 更新GLB模型动画 ===\n                if (this.modelAnimationMixer) {\n                    const animationDelta = this.animationClock.getDelta();\n                    this.modelAnimationMixer.update(animationDelta);\n                }\n                \n                this.renderer.render(this.scene, this.camera);\n                requestAnimationFrame(() => this.gameLoop());\n            }\n\n            updatePropeller(deltaTime) {\n                // Animate propeller spinning\n                if (this.propeller) {\n                    this.propeller.rotation.z += 30 * deltaTime; // Fast spinning around Z axis (forward motion)\n                }\n            }\n\n            showWrapMessage() {\n                // 防止消息过于频繁显示\n                const currentTime = Date.now();\n                if (currentTime - this.lastWrapMessageTime < 3000) return; // 3秒间隔\n                \n                this.lastWrapMessageTime = currentTime;\n                \n                // 创建提示消息\n                const messages = [\n                    \"🌍 Entering a new sector...\",\n                    \"✈️ Flying to the far side of the world\",\n                    \"🗺️ Warping at world boundary...\",\n                    \"🌌 Looping world enables endless exploration\"\n                ];\n                \n                const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n                \n                // 显示临时消息\n                const messageElement = document.createElement('div');\n                messageElement.textContent = randomMessage;\n                messageElement.style.cssText = `\n                    position: fixed;\n                    top: 20%;\n                    left: 50%;\n                    transform: translateX(-50%);\n                    background: rgba(0, 0, 0, 0.8);\n                    color: #00ff00;\n                    padding: 15px 25px;\n                    border-radius: 10px;\n                    font-size: 18px;\n                    font-family: 'Courier New', monospace;\n                    z-index: 1000;\n                    pointer-events: none;\n                    animation: fadeInOut 3s ease-in-out;\n                `;\n                \n                // 添加CSS动画\n                if (!document.querySelector('#wrapMessageStyle')) {\n                    const style = document.createElement('style');\n                    style.id = 'wrapMessageStyle';\n                    style.textContent = `\n                        @keyframes fadeInOut {\n                            0% { opacity: 0; transform: translateX(-50%) translateY(-20px); }\n                            20% { opacity: 1; transform: translateX(-50%) translateY(0); }\n                            80% { opacity: 1; transform: translateX(-50%) translateY(0); }\n                            100% { opacity: 0; transform: translateX(-50%) translateY(20px); }\n                        }\n                    `;\n                    document.head.appendChild(style);\n                }\n                \n                document.body.appendChild(messageElement);\n                \n                // 3秒后移除消息\n                setTimeout(() => {\n                    if (messageElement.parentNode) {\n                        messageElement.parentNode.removeChild(messageElement);\n                    }\n                }, 3000);\n            }\n        }\n\n        // Start the game\n        const game = new SkyWarriors();\n    "],"names":["SkyWarriors","THREE.Vector3","THREE.Clock","hash","THREE.Raycaster","healthDisplay","healthValue","THREE.Scene","fogColor","THREE.Fog","THREE.PerspectiveCamera","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","skyLight","THREE.HemisphereLight","light","fillLight","groundGeometry","THREE.PlaneGeometry","groundColor","groundMaterial","THREE.MeshLambertMaterial","vertices","i","ground","THREE.Mesh","type","geo","THREE.ConeGeometry","mat","m","pyramidMat","size","p","trunk","THREE.CylinderGeometry","crown","THREE.SphereGeometry","g","THREE.Group","h","main","group","arm","r","shrub","water","rad","THREE.CircleGeometry","isl","t","x","z","centerX","centerZ","count","color","angle","radius","height","baseRadius","shape","mountainColor","mountainGeometry","base","top","BufferGeometryUtils","BufferGeometryUtils.mergeGeometries","posAttr","vx","vy","vz","noise","hFactor","THREE.MathUtils","baseColor","THREE.Color","tint","bbox","placeY","mountainMaterial","mountain","snowHeight","snow","topY","cloudGeometry","cloudMaterial","cloud","loader","GLTFLoader","baseUrl","modelPath","gltf","model","targetSize","THREE.Box3","currentMaxSize","scaleRatio","THREE.AnimationMixer","anim","clip","index","action","THREE.LoopRepeat","animName","child","error","planeGroup","fuselageMaterial","THREE.MeshStandardMaterial","wingMaterial","darkMetalMaterial","fuselageGeometry","fuselage","noseGeometry","nose","cowlingGeometry","cowling","wingRootGeometry","THREE.BoxGeometry","wingRoot","side","section","width","thickness","wingGeometry","wingSection","wingTipGeometry","wingTip","tailGeometry","tail","tailGroup","spanScale","sections","baseWidth","baseThickness","chordBase","rootWidth","rootThickness","rootChord","rootGeo","rootMesh","s","chord","mesh","tipGeo","tip","THREE.Shape","extrudeGeo","THREE.ExtrudeGeometry","bb","xCenter","fin","spinnerGeometry","spinnerMaterial","spinner","hubGeometry","hub","propGroup","bladeMaterial","bladeGeometry","blade","tipGeometry","gearMaterial","strutGeometry","strut","wheelGeometry","wheelMaterial","wheel","rimGeometry","rim","tailGearGroup","tailStrut","tailAxle","tailWheelGeometry","tailWheel","canopyRadius","canopyGeom","canopyGlassMaterial","canopyGroup","canopyGlass","canopyFrameMaterial","frameTubeRadius","frameRadialSegments","frameTubularSegments","baseRing","THREE.TorusGeometry","foreAftRing","leftRightRing","topSpine","seatGeometry","seatMaterial","seat","stickGeometry","stick","panelGeometry","panelMaterial","panel","lightGeometry","lightMaterial","tailLightGeometry","tailLightMaterial","tailLight","exhaustGeometry","exhaustMaterial","exhaust","existingCannons","barrelsGroup","isCustomModel","barrelMat","barrelGeo","barrel","ringGeo","ring","e","deltaTime","now","THREE.Euler","origin","forward","THREE.MeshBasicMaterial","flashGeo","flashMat","flash","storedName","overlay","val","raw","rowsContainer","entries","name","data","a","b","d","idx","tr","nameDisp","exportBtn","blob","url","hud","tk","sk","tt","ti","tank","wi","ship","f","position","targetPosition","speed","geometry","material","direction","bullet","gameOverDiv","shooterPos","targetPos","targetVel","bulletSpeed","accuracy","timeToTarget","predictedPos","inaccuracy","hullLen","hullWidth","hullHeight","spindleGeo","pos","nz","taper","hullMat","spindle","deck","tower","radar","mastHeight","mast","arrowGroup","arrowMat","cone","stem","turretMat","shipTurretGeo","mkTurret1","mkTurret2","tur","healthBar","maxHealth","scorch","treeType","depth","forestType","treeCount","clusterX","clusterZ","offsetX","offsetZ","cfg","deform","THREE.DoubleSide","lake","ringCount","dist","types","treeGroup","islandRadiusTop","islandRadiusBottom","sandColor","island","rimGeo","trunkHeight","trunkRadius","pineTrunkGeometry","pineTrunkMaterial","pineTrunk","greenShades","layer","layerRadius","layerHeight","crownGeometry","crownMaterial","crownLayer","oakTrunkGeometry","oakTrunkMaterial","oakTrunk","mainCrownGeometry","mainCrownMaterial","mainCrown","smallCrownGeometry","smallCrownMaterial","smallCrown","birchTrunkGeometry","birchTrunkMaterial","birchTrunk","birchCrownGeometry","birchCrownMaterial","birchCrown","palmTrunkGeometry","palmTrunkMaterial","palmTrunk","leaf","leafGeometry","leafMaterial","palmLeaf","mixedTypes","c","bush","ang","THREE.DodecahedronGeometry","col","rock","blades","baseX","baseZ","bladeCount","flock","bird","delta","limit","v","y","factor","colors","patch","hit","palette","baseMat","hullLength","hull","trackMat","track","wheelGeo","wheelMat","wheelZs","zv","w","turretHeight","turret","turretY","hatchGeo","hatchMat","hatch","aaVariant","mgGroup","mount","gunMat","tubeGeo","muzzleGeo","ox","oy","tube","muzzle","gunPivot","barrelLength","inner","moveSpeed","turretSpeed","isAA","shouldUpdateMovement","turnAngle","moveMultiplier","worldBoundary","currentTime","leadPosition","bulletStartPos","aimDirection","phase","flameCount","animate","ratio","ch","container","bg","fill","text","entity","camera","worldPos","screenPos","healthPercent","start","fade","tankMesh","newMat","smokeGroup","smokeGeo","smokeMat","smoke","spacing","j","isTown","buildingGroup","buildingGeometry","buildingColors","buildingMaterial","building","roofGeometry","roofMaterial","roof","windowGeometry","windowMaterial","window","controlPanel","animationList","animDiv","btn","fileInput","uploadArea","event","file","files","finalScale","oldPanel","hsl","currentView","viewName","existingNotification","notification","keys","turnSpeed","pitchSpeed","speedChangeRate","normalizedRoll","targetRoll","targetSpeed","rotation","thrust","liftStrength","lift","gravity","worldWrapped","aircraftRotation","rotationMatrix","THREE.Matrix4","cameraOffset","lookTarget","loadingScreen","progressFill","progress","progressInterval","message","existing","newType","prevScene","aircraft","playerPos","playerVel","fogColors","oldScene","aircraftKeep","obj","animationDelta","messages","randomMessage","messageElement","style"],"mappings":"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"}